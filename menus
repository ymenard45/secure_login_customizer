<?php
/*
Plugin Name: Secure Login Customiser
Plugin URI: https://sitewebprodesign.fr
Description: Un plugin d'authentification à deux facteurs pour WordPress en utilisant Google Authenticator
Version: 1.2
Author: Y.MENARD
Author URI: https://sitewebprodesign.fr
License: GPLv2 or later
Text Domain: mon-google-authentificator
*/

// Protection
defined( 'ABSPATH' ) or die( 'No script kiddies please!' );
if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly.
}

// Déclarations :
 define( 'SLC_PLUGIN_VERSION', '1.0.0' );
 define( 'SLC_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
 define( 'SLC_PLUGIN_URL', plugin_dir_url( __FILE__ ) );

// Initialisation :
add_action( 'admin_menu', 'slc_add_admin_menu' );
add_action( 'admin_init', 'slc_settings_init' );

function slc_add_admin_menu() {
    add_options_page(
        'Secure Login Customizer Settings',
        'SecureLoginCustomizer',
        'manage_options',
        'secure-login-customizer',
        'slc_options_page'
    );
}

// Supprime le code existant pour afficher les messages
remove_action( 'admin_notices', 'slc_display_message' );




function slc_settings_init() {
    register_setting( 'slc_options_group', 'slc_settings' );

    add_settings_section(
        'slc_settings_section',
        __( 'Secure Login Customizer Settings', 'slc' ),
        'slc_settings_section_callback',
        'slc_options_group'
    );

    // Ajouter les onglets
	add_settings_section( 'slc_tab1_section', __( '2FA Settings', 'slc' ), 'slc_tab1_callback', 'slc_options_group' );

    add_settings_section(
        'slc_tab2_section',
        __( 'Tab 2', 'slc' ),
        'slc_tab2_section_callback',
        'slc_options_group'
    );
    add_settings_section(
        'slc_tab3_section',
        __( 'Tab 3', 'slc' ),
        'slc_tab3_section_callback',
        'slc_options_group'
    );
    add_settings_section(
        'slc_tab4_section',
        __( 'Tab 4', 'slc' ),
        'slc_tab4_section_callback',
        'slc_options_group'
    );
    add_settings_section(
        'slc_tab5_section',
        __( 'Tab 5', 'slc' ),
        'slc_tab5_section_callback',
        'slc_options_group'
    );

    // Ajouter les champs de saisie pour chaque onglet
    slc_tab1_settings_init();
    slc_tab2_settings_init();
    slc_tab3_settings_init();
    slc_tab4_settings_init();
    slc_tab5_settings_init();
}

// Fonction générale pour l'affichage des options et des onglets 

function slc_options_page() {
    $active_tab = $_GET['tab'] ?? 'slc_tab1_section';
	?>
    <div class="wrap">
        <h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
        <form action="options.php" method="post">
            <?php settings_fields( 'slc_options_group' ); ?>
            <?php ddo_settings_sections( $active_tab ); ?>
             
        </form>

    </div>
    <?php
}

// Fonctions pour l'affichage des champs de saisie des onglets

/***  Onglet 1 ***/

function slc_tab1_settings_init() {
    add_settings_field(
        'slc_enable_2fa',
        __( 'Enable 2FA Authentication', 'slc' ),
        'slc_enable_2fa_callback',
        'slc_options_group',
        'slc_tab1_section'
    );

    add_settings_field(
        'slc_enable_backup_code',
        __( 'Enable Backup Code', 'slc' ),
        'slc_enable_backup_code_callback',
        'slc_options_group',
        'slc_tab1_section'
    );

    add_settings_field(
        'slc_restrict_2fa_deactivation',
        __( 'Restrict 2FA Deactivation', 'slc' ),
        'slc_restrict_2fa_deactivation_callback',
        'slc_options_group',
        'slc_tab1_section'
    );

    add_settings_field(
        'slc_2fa_security_groups',
        __( '2FA Security Groups', 'slc' ),
        'slc_2fa_security_groups_callback',
        'slc_options_group',
        'slc_tab1_section'
    );
}


// zone activation 2FA Saisie + validation

function secure_login_customizer_tab_2fa() {
  
    echo '<p class="slc-description">Configurez ici les options de l\'authentification à deux facteurs (2FA).</p>';
    slc_enable_2fa_callback();
    slc_enable_backup_code_callback();
    slc_disable_2fa_deactivation_callback();
    slc_security_groups_callback();
}

 

function slc_enable_2fa_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_2fa'] ) ? checked( $options['enable_2fa'], true, false ) : '';
    $html = '<div><input type="checkbox" id="slc_enable_2fa" name="slc_options[enable_2fa]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_2fa">' . __( 'Enable 2FA Authentication', 'slc' ) . '</label></div>';
    echo $html;
}


/*  function slc_enable_2fa_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_2fa'] ) ? checked( $options['enable_2fa'], true, false ) : '';
    $html = '<div><input type="checkbox" id="slc_enable_2fa" name="slc_options[enable_2fa]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_2fa">' . __( 'Enable 2FA Authentication', 'slc' ) . '</label></div>';
    echo $html;
} 
 */
function slc_enable_2fa_validate( $input ) {
    $valid = array();
    $valid['enable_2fa'] = isset( $input['enable_2fa'] ) ? true : false;
    return $valid;
}


// Case à cocher "Activer Backup Code"  Saisie + validation

function slc_enable_backup_code_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_backup_code'] ) ? checked( $options['enable_backup_code'], true, false ) : '';
    $html = '<div></br><input type="checkbox" id="slc_enable_backup_code" name="slc_options[enable_backup_code]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_backup_code">' . __( 'Enable Backup Code', 'slc' ) . '</label></div>';
    echo $html;
}

function slc_enable_backup_code_validate( $input ) {
    $valid = array();
    $valid['enable_backup_code'] = isset( $input['enable_backup_code'] ) ? true : false;
    return $valid;
}


// Case à cocher "Interdire la désactivation de 2FA Authentication"  Saisie + validation

function slc_disable_2fa_deactivation_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['disable_2fa_deactivation'] ) ? checked( $options['disable_2fa_deactivation'], true, false ) : '';
    $html = '<div></br><input type="checkbox" id="slc_disable_2fa_deactivation" name="slc_options[disable_2fa_deactivation]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_disable_2fa_deactivation">' . __( 'Activer / désactiver 2FA pour les groupes suivants', 'slc' ) . '</label></br></div>';
    echo $html;
}

function slc_disable_2fa_deactivation_validate( $input ) {
    $valid = array();
    $valid['disable_2fa_deactivation'] = isset( $input['disable_2fa_deactivation'] ) ? true : false;
    return $valid;
}


// Case à cocher de sélection des groupes de sécurité ou 2FA sera activée   Saisie + validation
function slc_security_groups_callback() {
    $options = get_option( 'slc_options' );
    $html = '<div></br>Sélection des groupes de sécurité</br></br>';
    $user_roles = get_editable_roles();
    foreach ( $user_roles as $role_name => $role_info ) {
        $checked = isset( $options['security_groups'][ $role_name ] ) ? checked( $options['security_groups'][ $role_name ], true, false ) : '';
        $html .= '<div><input type="checkbox" id="slc_security_groups_' . $role_name . '" name="slc_options[security_groups][' . $role_name . ']" value="1" ' . $checked . '/>';
        $html .= '<label for="slc_security_groups_' . $role_name . '">' . $role_info['name'] . '</label><br></div>';
    }
    echo $html;
}


function slc_security_groups_validate( $input ) {
    $valid = array();
    if ( isset( $input['security_groups'] ) ) {
        $security_groups = array_filter( $input['security_groups'], fn($role) => in_array( $role, array( 'administrator', 'shop_manager', 'editor', 'author', 'contributor', 'subscriber' ) ) );
        $valid['security_groups'] = $security_groups;
    }
    return $valid; 
}	
	

/***  Onglet 2  CHAMP  ***/
 
function slc_tab2_settings_init() {
    add_settings_field(
        'slc_enable_security_headers',
        __( 'Enable Security Headers', 'slc' ),
        'slc_enable_security_headers_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_anonymize_messages',
        __( 'Anonymize Messages', 'slc' ),
        'slc_anonymize_messages_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_reject_proxy_connections',
        __( 'Reject Proxy Connections', 'slc' ),
        'slc_reject_proxy_connections_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_reject_weak_passwords',
        __( 'Reject Weak Passwords', 'slc' ),
        'slc_reject_weak_passwords_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_blacklist',
        __( 'Blacklist', 'slc' ),
        'slc_blacklist_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_whitelist',
        __( 'Whitelist', 'slc' ),
        'slc_whitelist_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_max_login_attempts',
        __( 'Max Login Attempts', 'slc' ),
        'slc_max_login_attempts_callback',
        'slc_options_group',
        'slc_tab2_section'
    );
}


/***  Onglet 2  SAISIE ET VALIDATION***/
  
  // Case à cocher "Activer Security Headers" Saisie + Validation
  
  
     // Insérez ici le code pour afficher le contenu de l'onglet SECURITY
 
  
  
function slc_enable_security_headers_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_security_headers'] ) ? checked( $options['enable_security_headers'], true, false ) : '';
    $html = '<input type="checkbox" id="slc_enable_security_headers" name="slc_options[enable_security_headers]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_security_headers">' . __( 'Enable Security Headers', 'slc' ) . '</label>';
    echo $html;
}

function slc_enable_security_headers_validate( $input ) {
    $valid = array();
    $valid['enable_security_headers'] = isset( $input['enable_security_headers'] ) ? true : false;
    return $valid;
}

// Case à cocher "Activer l'anonymisation des messages"
function slc_enable_message_anonymization_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_message_anonymization'] ) ? checked( $options['enable_message_anonymization'], true, false ) : '';
    $html = '<input type="checkbox" id="slc_enable_message_anonymization" name="slc_options[enable_message_anonymization]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_message_anonymization">' . __( 'Enable Message Anonymization', 'slc' ) . '</label>';
    echo $html;
}

function slc_enable_message_anonymization_validate( $input ) {
    $valid = array();
    $valid['enable_message_anonymization'] = isset( $input['enable_message_anonymization'] ) ? true : false;
    return $valid;
}

// Case à cocher "Refuser les connexions depuis un proxy"
function slc_disable_proxy_connections_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['disable_proxy_connections'] ) ? checked( $options['disable_proxy_connections'], true, false ) : '';
    $html = '<input type="checkbox" id="slc_disable_proxy_connections" name="slc_options[disable_proxy_connections]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_disable_proxy_connections">' . __( 'Disable Proxy Connections', 'slc' ) . '</label>';
    echo $html;
}

function slc_disable_proxy_connections_validate( $input ) {
    $valid = array();
    $valid['disable_proxy_connections'] = isset( $input['disable_proxy_connections'] ) ? true : false;
    return $valid;
}

// Case à cocher "Interdire les Mots de passe à faible sécurité"
function slc_disable_weak_passwords_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['disable_weak_passwords'] ) ? checked( $options['disable_weak_passwords'], true, false ) : '';
    $html = '<input type="checkbox" id="slc_disable_weak_passwords" name="slc_options[disable_weak_passwords]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_disable_weak_passwords">' . __( 'Disable Weak Passwords', 'slc' ) . '</label>';
    echo $html;
}

function slc_disable_weak_passwords_validate( $input ) {
    $valid = array();
    $valid['disable_weak_passwords'] = isset( $input['disable_weak_passwords'] ) ? true : false;
    return $valid;
}

// Zone de saisie "Blacklist"
function slc_blacklist_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['blacklist'] ) ? sanitize_text_field( $options['blacklist'] ) : '';
    $html = '<textarea id="slc_blacklist" name="slc_options[blacklist]" rows="5" cols="50">' . $value . '</textarea>';
    echo $html;
}

function slc_blacklist_validate( $input ) {
    $valid = array();
    $valid['blacklist'] = isset( $input['blacklist'] ) ? sanitize_text_field( $input['blacklist'] ) : '';
    return $valid;
}

// Zone de saisie "Whitelist"
function slc_whitelist_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['whitelist'] ) ? sanitize_text_field( $options['whitelist'] ) : '';
    $html = '<textarea id="slc_whitelist" name="slc_options[whitelist]" rows="5" cols="50">' . $value . '</textarea>';
    echo $html;
}

function slc_whitelist_validate( $input ) {
    $valid = array();
    $valid['whitelist'] = isset( $input['whitelist'] ) ? sanitize_text_field( $input['whitelist'] ) : '';
    return $valid;
}

// Zone de saisie "Nombre de tentatives de connexions avant désactivation"
function slc_max_login_attempts_callback() {
    $options = get_option( 'slc_options' );
    $max_login_attempts = isset( $options['max_login_attempts'] ) ? esc_attr( $options['max_login_attempts'] ) : '';
    echo '<input type="number" min="0" max="20" id="max_login_attempts" name="slc_options[max_login_attempts]" value="' . $max_login_attempts . '"/>';
}

function slc_max_login_attempts_validate( $input ) {
    $valid = array();
    $valid['max_login_attempts'] = isset( $input['max_login_attempts'] ) ? absint( $input['max_login_attempts'] ) : 0;
    return $valid;
}

// Zone de saisie "Temps de blocage du compte"
function slc_account_block_time_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['account_block_time'] ) ? absint( $options['account_block_time'] ) : 0;
    $html = '<input type="number" id="slc_account_block_time" name="slc_options[account_block_time]" min="0" max="300" value="' . $value . '" />';
    echo $html;
}

function slc_account_block_time_validate( $input ) {
    $valid = array();
    $valid['account_block_time'] = isset( $input['account_block_time'] ) ? absint( $input['account_block_time'] ) : 0;
    return $valid;
}



/***  Onglet 3 ***/
	 
	function slc_tab3_settings_init() {
	add_settings_field(
	'slc_login_logo_url',
	__( 'Login Logo URL', 'slc' ),
	'slc_login_logo_url_callback',
	'slc_options_group',
	'slc_tab3_section'
	);

	 
	add_settings_field(
		'slc_desktop_logo_url',
		__( 'Desktop Logo URL', 'slc' ),
		'slc_desktop_logo_url_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_mobile_logo_url',
		__( 'Mobile Logo URL', 'slc' ),
		'slc_mobile_logo_url_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_button_color',
		__( 'Button Color', 'slc' ),
		'slc_button_color_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_background_color',
		__( 'Background Color', 'slc' ),
		'slc_background_color_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_text_color',
		__( 'Text Color', 'slc' ),
		'slc_text_color_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_border_color',
		__( 'Border Color', 'slc' ),
		'slc_border_color_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_opacity_level',
		__( 'Opacity Level', 'slc' ),
		'slc_opacity_level_callback',
		'slc_options_group',
		'slc_tab3_section'
	);
	}
 
// Zone de saisie "Url du logo"  Saisie + Controle + validation
 
function slc_logo_url_callback() {
    $options = get_option( 'slc_options' );
    $logo_url = isset( $options['logo_url'] ) ? esc_url_raw( $options['logo_url'] ) : '';
    echo '<input type="url" id="logo_url" name="slc_options[logo_url]" value="' . $logo_url . '"> ';
}


// Fonction de validation pour l'URL du logo
function slc_logo_url_validate( $input ) {
    $valid = array();
    if ( isset( $input['logo_url'] ) ) {
        if ( ! filter_var( $input['logo_url'], FILTER_VALIDATE_URL ) ) {
            add_settings_error(
                'slc_logo_url',
                'invalid_url',
                __( 'Invalid URL. Please enter a valid URL.', 'slc' )
            );
        } else {
            $valid['logo_url'] = esc_url_raw( $input['logo_url'] );
        }
    }
    return $valid;
}

 

// Zone de saisie "Url pour desktop"
function slc_desktop_url_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['desktop_url'] ) ? esc_url_raw( $options['desktop_url'] ) : '';
    $html = '<input type="text" id="slc_desktop_url" name="slc_options[desktop_url]" value="' . $value . '" />';
    echo $html;
}

function slc_desktop_url_validate( $input ) {
    $valid = array();
    $valid['desktop_url'] = isset( $input['desktop_url'] ) ? esc_url_raw( $input['desktop_url'] ) : '';
    return $valid;
}

// Zone de saisie "Url pour mobile"
function slc_mobile_url_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['mobile_url'] ) ? esc_url_raw( $options['mobile_url'] ) : '';
    $html = '<input type="text" id="slc_mobile_url" name="slc_options[mobile_url]" value="' . $value . '" />';
    echo $html;
}

function slc_mobile_url_validate( $input ) {
    $valid = array();
    $valid['mobile_url'] = isset( $input['mobile_url'] ) ? esc_url_raw( $input['mobile_url'] ) : '';
    return $valid;
}

// Zone de saisie "Couleur du bouton"
function slc_button_color_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['button_color'] ) ? sanitize_hex_color( $options['button_color'] ) : '';
    $html = '<input type="text" id="slc_button_color" name="slc_options[button_color]" value="' . $value . '" />';
    echo $html;
}

function slc_button_color_validate( $input ) {
    $valid = array();
    $valid['button_color'] = isset( $input['button_color'] ) ? sanitize_hex_color( $input['button_color'] ) : '';
    return $valid;
}

// Zone de saisie "Couleur du texte"
function slc_text_color_callback() {
$options = get_option( 'slc_options' );
$value = isset( $options['text_color'] ) ? sanitize_hex_color( $options['text_color'] ) : '';
$html = '<input type="text" id="slc_text_color" name="slc_options[text_color]" value="' . $value . '" />';
echo $html;
}

function slc_text_color_validate( $input ) {
$valid = array();
$valid['text_color'] = isset( $input['text_color'] ) ? sanitize_hex_color( $input['text_color'] ) : '';
return $valid;
}

// Zone de saisie "Couleur des bords"
function slc_border_color_callback() {
$options = get_option( 'slc_options' );
$value = isset( $options['border_color'] ) ? sanitize_hex_color( $options['border_color'] ) : '';
$html = '<input type="text" id="slc_border_color" name="slc_options[border_color]" value="' . $value . '" />';
echo $html;
}

function slc_border_color_validate( $input ) {
$valid = array();
$valid['border_color'] = isset( $input['border_color'] ) ? sanitize_hex_color( $input['border_color'] ) : '';
return $valid;
}

// Zone de saisie "Niveau de transparence"
function slc_transparency_level_callback() {
$options = get_option( 'slc_options' );
$value = isset( $options['transparency_level'] ) ? absint( $options['transparency_level'] ) : '';
$html = '<input type="number" min="0" max="100" id="slc_transparency_level" name="slc_options[transparency_level]" value="' . $value . '" />';
echo $html;
}

function slc_transparency_level_validate( $input ) {
$valid = array();
$valid['transparency_level'] = isset( $input['transparency_level'] ) ? absint( $input['transparency_level'] ) : '';
return $valid;
}



/***  Onglet 4 ***/

	function slc_tab4_settings_init() {
	add_settings_field(
	'slc_qr_code_page_url',
	__( 'QR Code Page URL', 'slc' ),
	'slc_qr_code_page_url_callback',
	'slc_options_group',
	'slc_tab4_section'
	);
	}
	
/*** Onglet 5 ***/	

function slc_tab5_settings_init() {

    register_setting( 'slc_tab5', 'slc_verification_input_label', 'sanitize_text_field' );
    register_setting( 'slc_tab5', 'slc_verification_input_placeholder', 'sanitize_text_field' );
    register_setting( 'slc_tab5', 'slc_verification_input_btn_text', 'sanitize_text_field' );

    add_settings_section(
        'slc_tab5_section',
        __( 'Verification Input', 'slc' ),
        'slc_tab5_section_callback',
        'slc_tab5'
    );

    add_settings_field(
        'slc_verification_input_label',
        __( 'Label', 'slc' ),
        'slc_verification_input_label_callback',
        'slc_tab5',
        'slc_tab5_section'
    );

    add_settings_field(
        'slc_verification_input_placeholder',
        __( 'Placeholder', 'slc' ),
        'slc_verification_input_placeholder_callback',
        'slc_tab5',
        'slc_tab5_section'
    );

    add_settings_field(
        'slc_verification_input_btn_text',
        __( 'Button Text', 'slc' ),
        'slc_verification_input_btn_text_callback',
        'slc_tab5',
        'slc_tab5_section'
    );

}

function slc_tab5_section_callback() {
    // Fonction pour afficher le texte d'explication de la section
}

function slc_verification_input_label_callback() {
    ?>
    <input type="text" name="slc_verification_input_label" value="<?php echo esc_attr( get_option( 'slc_verification_input_label', '' ) ); ?>" />
    <?php
}

function slc_verification_input_placeholder_callback() {
    ?>
    <input type="text" name="slc_verification_input_placeholder" value="<?php echo esc_attr( get_option( 'slc_verification_input_placeholder', '' ) ); ?>" />
    <?php
}

function slc_verification_input_btn_text_callback() {
    ?>
    <input type="text" name="slc_verification_input_btn_text" value="<?php echo esc_attr( get_option( 'slc_verification_input_btn_text', '' ) ); ?>" />
    <?php
}

function slc_plugin_init() {
    // Code de votre fonction ici
}
add_action( 'admin_init', 'slc_plugin_init' );	


/***                       ***/

function ddo_settings_sections( $page ) {
    global $wp_settings_sections, $wp_settings_fields;

    if ( ! isset( $wp_settings_sections ) || ! isset( $wp_settings_sections[ $page ] ) ) {
        return;
    }

    echo '<div class="wrap">';
    do_action( 'ddo_settings_sections_' . $page );
    echo '<form method="post" action="options.php">';
    wp_nonce_field( 'update-options' );

    foreach ( (array) $wp_settings_sections[ $page ] as $section ) {
        echo '<h3>' . esc_html( $section['title'] ) . '</h3>';
        echo '<p>' . esc_html( $section['description'] ) . '</p>';
        if ( ! isset( $wp_settings_fields ) || ! isset( $wp_settings_fields[ $page ][ $section['id'] ] ) ) {
            continue;
        }
        echo '<table class="form-table">';
        do_action( 'ddo_settings_fields_' . $page . '_' . $section['id'] );
        echo '</table>';
    }

    
    echo '</form>
	submit_button();
	</div>';
}




/*** Fonction de validation des options ***/	
	
// Fonction de validation pour les options
function slc_options_validate( $input ) {
    $valid = array();
    
    // Validation pour l'onglet 1
    if ( isset( $input['enable_2fa'] ) ) {
        $valid['enable_2fa'] = 1;
    }
    if ( isset( $input['enable_backup_codes'] ) ) {
        $valid['enable_backup_codes'] = 1;
    }
    if ( isset( $input['disable_2fa_deactivation'] ) ) {
        $valid['disable_2fa_deactivation'] = 1;
    }
    if ( isset( $input['security_groups'] ) ) {
        $valid['security_groups'] = sanitize_text_field( $input['security_groups'] );
    }
    
    // Validation pour l'onglet 2
    if ( isset( $input['enable_security_headers'] ) ) {
        $valid['enable_security_headers'] = 1;
    }
    if ( isset( $input['anonymize_messages'] ) ) {
        $valid['anonymize_messages'] = 1;
    }
    if ( isset( $input['block_proxy_connections'] ) ) {
        $valid['block_proxy_connections'] = 1;
    }
    if ( isset( $input['enable_strong_passwords'] ) ) {
        $valid['enable_strong_passwords'] = 1;
    }
    if ( isset( $input['blacklist'] ) ) {
        $valid['blacklist'] = sanitize_text_field( $input['blacklist'] );
    }
    if ( isset( $input['whitelist'] ) ) {
        $valid['whitelist'] = sanitize_text_field( $input['whitelist'] );
    }
    if ( isset( $input['max_login_attempts'] ) ) {
        $valid['max_login_attempts'] = absint( $input['max_login_attempts'] );
    }
    if ( isset( $input['account_lock_time'] ) ) {
        $valid['account_lock_time'] = absint( $input['account_lock_time'] );
    }
    
        // Validation pour l'onglet 3
    if ( isset( $input['logo_url'] ) ) {
        if ( ! filter_var( $input['logo_url'], FILTER_VALIDATE_URL ) ) {
            add_settings_error(
                'slc_logo_url',
                'invalid_url',
                __( 'Invalid URL. Please enter a valid URL.', 'slc' )
            );
        } else {
            $valid['logo_url'] = esc_url_raw( $input['logo_url'] );
        }
    }
    if ( isset( $input['desktop_url'] ) ) {
        $valid['desktop_url'] = esc_url_raw( $input['desktop_url'] );
    }
    if ( isset( $input['mobile_url'] ) ) {
        $valid['mobile_url'] = esc_url_raw( $input['mobile_url'] );
    }
    if ( isset( $input['button_color'] ) ) {
        $valid['button_color'] = sanitize_hex_color( $input['button_color'] );
    }
    if ( isset( $input['background_color'] ) ) {
        $valid['background_color'] = sanitize_hex_color( $input['background_color'] );
    }
    if ( isset( $input['text_color'] ) ) {
        $valid['text_color'] = sanitize_hex_color( $input['text_color'] );
    }
    if ( isset( $input['border_color'] ) ) {
        $valid['border_color'] = sanitize_hex_color( $input['border_color'] );
    }
    if ( isset( $input['transparency'] ) ) {
        $valid['transparency'] = absint( $input['transparency'] );
    }
    
    // Validation pour l'onglet 4
    if ( isset( $input['qr_code_page_url'] ) ) {
        $valid['qr_code_page_url'] = esc_url_raw( $input['qr_code_page_url'] );
    }
    if ( isset( $input['secret_code_page_url'] ) ) {
        $valid['secret_code_page_url'] = esc_url_raw( $input['secret_code_page_url'] );
    }
    if ( isset( $input['disable_account_page_url'] ) ) {
        $valid['disable_account_page_url'] = esc_url_raw( $input['disable_account_page_url'] );
    }
    
    // Retourne les options valides
    return $valid;
}


// Ajout des onglets
add_action( 'admin_init', 'slc_tab1_settings_init' );
add_action( 'admin_init', 'slc_tab2_settings_init' );
add_action( 'admin_init', 'slc_tab3_settings_init' );
add_action( 'admin_init', 'slc_tab4_settings_init' );

// Ajout des fonctions pour la création des onglets
add_action( 'slc_options_tabs', 'slc_options_tab1' );
add_action( 'slc_options_tabs', 'slc_options_tab2' );
add_action( 'slc_options_tabs', 'slc_options_tab3' );
add_action( 'slc_options_tabs', 'slc_options_tab4' );
add_action( 'slc_options_tabs', 'slc_options_tab5' );

// Initialisation du plugin
add_action( 'admin_init', 'slc_plugin_init' );


function secure_login_customizer_menu() {
    add_options_page(
        'Secure Login Customizer',
        'Secure Login Customizer',
        'manage_options',
        'secure-login-customizer',
        'secure_login_customizer_admin_page',
		'',
		30
    );
}



// Add the admin menu

add_action('admin_menu', 'secure_login_customizer_menu');

function secure_login_customizer_tab_messages() {
    // Insérez ici le code pour afficher le contenu de l'onglet "Customisation Messages"
    echo '<h2>Customisation Messages</h2>';
    echo '<p>Personnalisez ici les messages affichés sur la page de connexion.</p>';
}

/*
La fonction secure_login_customizer_init utilise register_setting(), 
add_settings_section() et add_settings_field() pour définir les groupes
d'options, sections et champs pour chaque onglet. 
*/

function secure_login_customizer_init() {
    // Onglet 2FA
    register_setting(
        'secure_login_customizer_2fa_options_group',
        'secure_login_customizer_2fa_options',
        'slc_enable_2fa_validate'
    );

    add_settings_section(
        'slc_2fa_options_section',
        '',
        '',
        'secure_login_customizer_2fa_options_group'
    );

    add_settings_field(
        'slc_enable_2fa',
        __('Enable 2FA Authentication', 'slc'),
        'slc_enable_2fa_callback',
        'secure_login_customizer_2fa_options_group',
        'slc_2fa_options_section'
    );

    // Onglet Security
    register_setting(
        'secure_login_customizer_security_options_group',
        'secure_login_customizer_security_options',
        'slc_security_options_validate'
    );

    add_settings_section(
        'slc_security_options_section',
        '',
        '',
        'secure_login_customizer_security_options_group'
    );

    add_settings_field(
        'slc_enable_security_headers',
        __('Enable Security Headers', 'slc'),
        'slc_enable_security_headers_callback',
        'secure_login_customizer_security_options_group',
        'slc_security_options_section'
    );
    // Onglet Customization
    register_setting(
        'secure_login_customizer_customization_options_group',
        'secure_login_customizer_customization_options',
        'slc_customization_options_validate'
    );

    add_settings_section(
        'slc_customization_options_section',
        '',
        '',
        'secure_login_customizer_customization_options_group'
    );

    add_settings_field(
        'slc_custom_login_logo',
        __('Custom Login Logo', 'slc'),
        'slc_custom_login_logo_callback',
        'secure_login_customizer_customization_options_group',
        'slc_customization_options_section'
    );

    // Onglet Logging
    register_setting(
        'secure_login_customizer_logging_options_group',
        'secure_login_customizer_logging_options',
        'slc_logging_options_validate'
    );

    add_settings_section(
        'slc_logging_options_section',
        '',
        '',
        'secure_login_customizer_logging_options_group'
    );

    add_settings_field(
        'slc_enable_logging',
        __('Enable Logging', 'slc'),
        'slc_enable_logging_callback',
        'secure_login_customizer_logging_options_group',
        'slc_logging_options_section'
    );
    // Onglet Advanced
    register_setting(
        'secure_login_customizer_advanced_options_group',
        'secure_login_customizer_advanced_options',
        'slc_advanced_options_validate'
    );

    add_settings_section(
        'slc_advanced_options_section',
        '',
        '',
        'secure_login_customizer_advanced_options_group'
    );

    add_settings_field(
        'slc_custom_captcha_site_key',
        __('Custom Captcha Site Key', 'slc'),
        'slc_custom_captcha_site_key_callback',
        'secure_login_customizer_advanced_options_group',
        'slc_advanced_options_section'
    );
}

add_action('admin_init', 'secure_login_customizer_init');


/*** ajout lien settings  ***/
function secure_login_customizer_add_plugin_settings_link( $links ) {
    $settings_link = '<a href="admin.php?page=secure-login-customizer">' . __( 'Settings', 'slc' ) . '</a>';
    array_unshift( $links, $settings_link );
    return $links;
}
add_filter( 'plugin_action_links_' . plugin_basename( __FILE__ ), 'secure_login_customizer_add_plugin_settings_link' );



/*** secure_login_customizer_admin_page ***/

function secure_login_customizer_admin_page() {
	// Set active tab
	$active_tab = isset( $_GET['tab'] ) ? $_GET['tab'] : '2fa';
	?>
	<style>
		h1  {
			font-size: 3em;
			color: #0073aa;
		}
		h2.nav-tab-wrapper .nav-tab {
			font-size: 1em;
			color: #0073aa;
		}	
		#setting-error-settings_updated {
			position: fixed;
			bottom: 0;
			width: 100%;
			margin-bottom: 60px;
			font-size: 1.5em;
			color: #0073aa;				
		}
	</style>
	<div class="wrap">
		<p><?php _e( 'Customize your WordPress login page with Secure Login Customizer!', 'slc' ); ?></p>
		<h2 class="nav-tab-wrapper">
			<a href="?page=secure-login-customizer&tab=2fa" class="nav-tab <?php echo $active_tab == '2fa' ? 'nav-tab-active' : ''; ?>"><?php _e('2FA', 'slc'); ?></a>
			<a href="?page=secure-login-customizer&tab=security" class="nav-tab <?php echo $active_tab == 'security' ? 'nav-tab-active' : ''; ?>"><?php _e('Security', 'slc'); ?></a>
			<a href="?page=secure-login-customizer&tab=customization" class="nav-tab <?php echo $active_tab == 'customization' ? 'nav-tab-active' : ''; ?>"><?php _e('Customization', 'slc'); ?></a>
			<a href="?page=secure-login-customizer&tab=logging" class="nav-tab <?php echo $active_tab == 'logging' ? 'nav-tab-active' : ''; ?>"><?php _e('Logging', 'slc'); ?></a>
			<a href="?page=secure-login-customizer&tab=advanced" class="nav-tab <?php echo $active_tab == 'advanced' ? 'nav-tab-active' : ''; ?>"><?php _e('Advanced', 'slc'); ?></a>
		</h2>
		<form method="post" action="options.php">
			<?php
			settings_fields( 'slc_options_group' );
			do_settings_sections( 'secure-login-customizer' );

			switch ( $active_tab ) {
				case '2fa':
					secure_login_customizer_tab_2fa();
					break;
				case 'security':
					secure_login_customizer_tab_security();
					break;
				case 'customization':
					echo '<p>Contenu de l\'onglet Customization</p>';
					break;
				case 'advanced':
					echo '<p>Contenu de l\'onglet Advanced</p>';
					break;
				case 'logging':
					echo '<p>Contenu de l\'onglet Logging</p>';
					break;
				default:
					secure_login_customizer_tab_2fa();
					break;
			}

			submit_button(); 
			?>
		</form>
	</div>
	<?php
}



function slc_load_textdomain() {
    load_plugin_textdomain( 'slc', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );
}

// Chargement du fichier de traduction
add_action( 'plugins_loaded', 'slc_load_textdomain' );

function slc_activate_plugin() {
    // Création des options du plugin
    $options = array(
        'enable_2fa' => false,
        'enable_backup_code' => false,
        'restrict_2fa_deactivation' => false,
        '2fa_security_groups' => '',
        'enable_security_headers' => false,
        'anonymize_messages' => false,
        'reject_proxy_connections' => false,
        'reject_weak_passwords' => false,
        'blacklist' => '',
        'whitelist' => '',
        'max_login_attempts' => 5,
        'account_lockout_time' => 5,
        'login_logo_url' => '',
        'desktop_logo_url' => '',
        'mobile_logo_url' => '',
        'button_color' => '',
        'background_color' => '',
        'text_color' => '',
        'border_color' => '',
        'opacity_level' => 100,
        'qr_code_page_url' => '',
        'secret_code_page_url' => '',
        'disable_account_page_url' => ''
    );

    // Enregistrement des options du plugin
    add_option( 'slc_options', $options );

    // Création de la table de la liste noire (blacklist) si elle n'existe pas
    global $wpdb;
    $table_name = esc_sql( $wpdb->prefix . 'slc_blacklist' );
    $charset_collate = $wpdb->get_charset_collate();

    $sql = "CREATE TABLE IF NOT EXISTS $table_name (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        ip varchar(39) NOT NULL,
        PRIMARY KEY  (id)
    ) $charset_collate;";

    require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
    dbDelta( $sql );
}

// Activation du plugin
register_activation_hook( __FILE__, 'slc_activate_plugin' );

/*** Management of Tab 2 ***/

function slc_security_page_callback() {
  ?>
    <div class="wrap">
      <h2><?php _e('Secure Login Customizer - Security', 'slc'); ?></h2>
      <form method="post" action="options.php">
        <?php settings_fields('slc_security_options'); ?>
        <?php do_settings_sections('slc_security'); ?>
        
      </form>
	  <?php submit_button(); ?>
    </div>
  <?php
}

function register_security_options() {
  register_setting( 'secure_login_customizer_security_options_group', 'secure_login_customizer_security_options', 'security_options_sanitize' );
  add_settings_section( 'security_options_section', 'Security Options', 'security_options_section_callback', 'secure_login_customizer_security_options' );
  add_settings_field( 'password_complexity_options', 'Complexité de mot de passe', 'password_complexity_options_callback', 'secure_login_customizer_security_options', 'security_options_section' );
}

// Function to initialize the sections and fields of the "Security Plus" page.
function slc_security_plus_initialize_options() {
  // Initialize the "Security Settings" section.
    ?>
   <script>
  var security_settings_section = document.getElementById("slc-security-settings-section");
  var security_headers_checkbox = document.getElementById("slc-security-headers-checkbox");
  var anonymize_messages_checkbox = document.getElementById("slc-anonymize-messages-checkbox");
  var refuse_proxy_checkbox = document.getElementById("slc-refuse-proxy-checkbox");
  var password_security_checkbox = document.getElementById("slc-password-security-checkbox");
  var blacklist_input = document.getElementById("slc-blacklist-input");
  var whitelist_input = document.getElementById("slc-whitelist-input");
  var login_attempts_input = document.getElementById("slc-login-attempts-input");
  var account_lockout_input = document.getElementById("slc-account-lockout-input");

  // Add the event listener to the "Security Headers" checkbox.
  security_headers_checkbox.addEventListener("change", function() {
    slc_security_headers_checkbox_changed(security_headers_checkbox.checked);
  });
};


  // Add the event listener to the "Anonymize Messages" checkbox.
  anonymize_messages_checkbox.addEventListener("change", function() {
    slc_anonymize_messages_checkbox_changed(anonymize_messages_checkbox.checked);
  });

  // Add the event listener to the "Refuse Proxy" checkbox.
  refuse_proxy_checkbox.addEventListener("change", function() {
    slc_refuse_proxy_checkbox_changed(refuse_proxy_checkbox.checked);
  });

  // Add the event listener to the "Password Security" checkbox.
  password_security_checkbox.addEventListener("change", function() {
    slc_password_security_checkbox_changed(password_security_checkbox.checked);
  });

  // Add the event listener to the "Blacklist" input.
  blacklist_input.addEventListener("input", function() {
    slc_blacklist_input_changed(blacklist_input.value);
  });

  // Add the event listener to the "Whitelist" input.
  whitelist_input.addEventListener("input", function() {
    slc_whitelist_input_changed(whitelist_input.value);
  });

  // Add the event listener to the "Login Attempts" input.
  login_attempts_input.addEventListener("input", function() {
    slc_login_attempts_input_changed(login_attempts_input.value);
  });

  // Add the event listener to the "Account Lockout" input.
  account_lockout_input.addEventListener("input", function() {
    slc_account_lockout_input_changed(account_lockout_input.value);
  });
   </script>
   <?php
}

function slc_security_headers_checkbox_changed() {
	   ?>
   <script>
  var security_headers_checkbox = document.getElementById("slc-security-headers-checkbox");

  if (security_headers_checkbox.checked) {
    console.log("Security headers enabled");

    // Set the "X-Content-Type-Options" header to "nosniff".
    document.headers.set("X-Content-Type-Options", "nosniff");
  } else {
    console.log("Security headers disabled");
  }
     </script>
   <?php
}


function slc_password_security_checkbox_changed( ) {
  if (checked) {
    console.log("Password security enabled");
  } else {
    console.log("Password security disabled");
  }
}

function slc_blacklist_input_changed() {
		   ?>
   <script>
  var blacklist_input = document.getElementById("slc-blacklist-input");
  console.log("Blacklist changed to: " + blacklist_input.value);
       </script>
   <?php
}

function slc_whitelist_input_changed() {
		   ?>
   <script>
  var whitelist_input = document.getElementById("slc-whitelist-input");
  console.log("Whitelist changed to: " + whitelist_input.value);
       </script>
   <?php
}
 
function slc_login_attempts_input_changed() {
		   ?>
   <script>
  var login_attempts_input = document.getElementById("slc-login-attempts-input");
  console.log("Login attempts changed to: " + login_attempts_input.value);
       </script>
   <?php
}

function slc_account_lockout_input_changed() {
	?>
   <script>
  var account_lockout_input = document.getElementById("slc-account-lockout-input");
  console.log("Account lockout time changed to: " + account_lockout_input.value);
       </script>
   <?php
}

/*********************************************/

// Action: Enregistrer la valeur de la case à cocher 'Activer Security headers'

function save_security_headers_state() {
    $value = isset( $_POST['secure_login_customizer_security_headers'] ) ? 1 : 0;
    update_option( 'secure_login_customizer_security_headers', $value );
}
add_action( 'admin_post_save_security_headers_state', 'save_security_headers_state' );

// Action: Vérifier et activer/désactiver les Security Headers selon l'état de la case à cocher 'Activer Security headers'
// Fonction: check_and_apply_security_headers()

function check_and_apply_security_headers() {
    $value = get_option( 'secure_login_customizer_security_headers' );
    if ( $value ) {
        // Activer les Security Headers
        // ...
    } else {
        // Désactiver les Security Headers
        // ...
    }
}
add_action( 'wp_loaded', 'check_and_apply_security_headers' );



 function save_proxy_state() {
    $value = isset( $_POST['secure_login_customizer_proxy'] ) ? 1 : 0;
    update_option( 'secure_login_customizer_proxy', $value );
}
add_action( 'admin_post_save_proxy_state', 'save_proxy_state' );


// Ajouter le bouton pour afficher le pop-up
// Include popup.php file
include( plugin_dir_path( __FILE__ ) . 'popup.php' );
function add_password_popup_button() {
  ?>
  <button id="password-popup-btn">Options de complexité de mot de passe</button>
  <?php
}
add_action('admin_enqueue_scripts', 'add_password_popup_button');

// Ajouter le fichier JavaScript pour le pop-up
function add_password_popup_script() {
  wp_enqueue_script('password-popup-script', plugin_dir_url(__FILE__) . 'password-popup.js', array('jquery', 'jquery-ui-dialog'));
}
add_action('admin_enqueue_scripts', 'add_password_popup_script'); 

// Enregistrer les options de complexité de mot de passe
function password_popup_save_options() {
  if ( ! current_user_can( 'manage_options' ) ) {
    wp_die( 'Vous n\'êtes pas autorisé à accéder à cette page.' );
  }

  $options = array(
    'length' => sanitize_text_field($_POST['length']),
    'uppercase' => isset($_POST['uppercase']) ? true : false,
    'lowercase' => isset($_POST['lowercase']) ? true : false,
    'digit' => isset($_POST['digit']) ? true : false,
    'symbol' => isset($_POST['symbol']) ? true : false
  );

  update_option('password_complexity_options', $options);

  wp_die();
}
add_action('wp_ajax_password_popup_save_options', 'password_popup_save_options');
add_action('wp_ajax_nopriv_password_popup_save_options', 'password_popup_save_options');



function secure_login_customizer_tab_security() {

	
	?>
    <form method="post" action="options.php">
        <?php settings_fields( 'secure_login_customizer_security_options' ); ?>
        <?php do_settings_sections( 'secure_login_customizer_security' ); ?>
        <table class="form-table">
            <tbody>
			<tr>
				<th scope="row"><?php _e('Activer Security headers', 'slc'); ?></th>
				<td>
					<?php $security_headers_state = get_option( 'secure_login_customizer_security_headers' ); ?>
					<label for="secure_login_customizer_security_headers">
						<input type="checkbox" id="secure_login_customizer_security_headers" name="secure_login_customizer_security_headers" <?php checked( $security_headers_state, 1 ); ?>>
						<?php _e('Activer les Security Headers', 'slc'); ?>
					</label>
				</td>
			</tr>
			<tr>
				<th scope="row"><?php _e('Activer l\'anonymisation des messages', 'slc'); ?></th>
				<td>
					<?php $anonymize_messages_state = get_option( 'secure_login_customizer_anonymize_messages' ); ?>
					<label for="secure_login_customizer_anonymize_messages">
						<input type="checkbox" id="secure_login_customizer_anonymize_messages" name="secure_login_customizer_anonymize_messages" <?php checked( $anonymize_messages_state, 1 ); ?>>
						<?php _e('Activer l\'anonymisation des messages', 'slc'); ?>
					</label>
				</td>
			</tr>
			<tr>
				<th scope="row"><?php _e('Refuser les connexions depuis un proxy', 'slc'); ?></th>
				<td>
					<?php $proxy_state = get_option( 'secure_login_customizer_proxy' ); ?>
					<label for="secure_login_customizer_proxy">
						<input type="checkbox" id="secure_login_customizer_proxy" name="secure_login_customizer_proxy" <?php checked( $proxy_state, 1 ); ?>>
						<?php _e('Refuser les connexions depuis un proxy', 'slc'); ?>
					</label>
				</td>
			</tr>
			<tr>
				<th scope="row"><?php _e('Interdire les mots de passe à faible sécurité', 'slc'); ?></th>
				<td>
				   	<?php $password_security_state = get_option( 'secure_login_customizer_password_security' ); ?>
					<label for="secure_login_customizer_password_security">
					<input type="checkbox" id="secure_login_customizer_password_security" name="secure_login_customizer_password_security" <?php checked( $password_security_state, 1 ); ?>>
						<?php _e('Cocher la case pour activer, cliquez sur le bouton à droite pour les options', 'slc'); ?>
						<?php add_password_popup_button(); ?>	
					</label>
				</td>
			</tr>
<?php if ( $password_security_state ) : ?>
    <button id="password-popup-btn">Options de complexité de mot de passe</button>
	<script>
		  jQuery(document).ready(function($) {
			$('#password-popup-btn').click(function() {
			  $('#password-popup').dialog({
				width: 400,
				modal: true,
				title: 'Options de complexité de mot de passe',
				buttons: {
				  "Enregistrer les options": function() {
					$('#password-popup-form').submit();
				  },
				  "Annuler": function() {
					$(this).dialog('close');
				  }
				}
			  });
			});
		  });
</script>
    <?php/* <tr>
        <th scope="row"><?php _e('Configuration des règles de sécurité des mots de passe', 'slc'); ?></th>
        <td>
            <label for="secure_login_customizer_password_length"><?php _e('Nombre de caractères minimum', 'slc'); ?></label>
            <input type="number" id="secure_login_customizer_password_length" name="secure_login_customizer_password_length" value="<?php echo esc_attr( get_option( 'secure_login_customizer_password_length', 8 ) ); ?>" min="8" max="64" step="1" required>

            <br><br>

            <input type="checkbox" id="secure_login_customizer_password_uppercase" name="secure_login_customizer_password_uppercase" <?php checked( get_option( 'secure_login_customizer_password_uppercase', true ) ); ?>>
            <label for="secure_login_customizer_password_uppercase"><?php _e('Doit contenir des majuscules', 'slc'); ?></label>

            <br>

            <input type="checkbox" id="secure_login_customizer_password_lowercase" name="secure_login_customizer_password_lowercase" <?php checked( get_option( 'secure_login_customizer_password_lowercase', true ) ); ?>>
            <label for="secure_login_customizer_password_lowercase"><?php _e('Doit contenir des minuscules', 'slc'); ?></label>

            <br>

            <input type="checkbox" id="secure_login_customizer_password_numbers" name="secure_login_customizer_password_numbers" <?php checked( get_option( 'secure_login_customizer_password_numbers', true ) ); ?>>
            <label for="secure_login_customizer_password_numbers"><?php _e('Doit contenir des chiffres', 'slc'); ?></label>

            <br>

            <input type="checkbox" id="secure_login_customizer_password_special_chars" name="secure_login_customizer_password_special_chars" <?php checked( get_option( 'secure_login_customizer_password_special_chars', true ) ); ?>>
            <label for="secure_login_customizer_password_special_chars"><?php _e('Doit contenir des caractères spéciaux', 'slc'); ?></label>
        </td>
    </tr> */
	<?php endif; ?>
    <tr>
        <th scope="row"><?php _e('Liste noire d\'IP', 'slc'); ?></th>
        <td>
            <label for="secure_login_customizer_blacklist">
            <input type="text" id="secure_login_customizer_blacklist" name="secure_login_customizer_blacklist" value="<?php echo esc_attr( get_option( 'secure_login_customizer_blacklist', '' ) ); ?>">
			<?php _e(' Liste d\'IP à bloquer séparées par des virgules', 'slc'); ?></label>	       

	   </td>
    </tr>
    <tr>
        <th scope="row"><?php _e('Whitelist d\'IP', 'slc'); ?></th>
        <td>
            <label for="secure_login_customizer_whitelist">
            <input type="text" id="secure_login_customizer_whitelist" name="secure_login_customizer_whitelist" value="<?php echo esc_attr( get_option( 'secure_login_customizer_whitelist', '' ) ); ?>">
            <?php _e(' Liste d\'IP à ne jamais bloquer séparées par des virgules', 'slc'); ?></label>
		</td>
    </tr>
    <tr>
        <th scope="row">
		<?php _e(' Nombre de tentatives de connexion avant désactivation', 'slc'); ?></th>
        <td>
            <label for="secure_login_customizer_max_login_attempts">
            <input type="number" id="secure_login_customizer_max_login_attempts" name="secure_login_customizer_max_login_attempts" value="<?php echo esc_attr( get_option( 'secure_login_customizer_max_login_attempts', 0 ) ); ?>" min="0" max="20" step="1" required>
			<?php _e('Nombre de tentatives entre 0 et 20 mn  ... 0 = Jamais', 'slc'); ?></label>
        </td>
    </tr>
    <tr>
        <th scope="row"><?php _e('Temps de blocage du compte (en minutes)', 'slc'); ?></th>
        <td>
            <label for="secure_login_customizer_login_lockout_duration">
            <input type="number" id="secure_login_customizer_login_lockout_duration" name="secure_login_customizer_login_lockout_duration" value="<?php echo esc_attr( get_option( 'secure_login_customizer_login_lockout_duration', 0 ) ); ?>" min="0" max="300" step="1" required>
			<?php _e('Durée de blocage de 0 à 240 minutes', 'slc'); ?></label>
		</td>
    </tr>
<?php submit_button(); ?>
</table>
</form>
<?php
}
 
 /*** fonctions pour sauvegarder les options des mots de passe  ***/
 
 // Enregistrer les options de complexité de mot de passe
function save_password_popup_options() {
  // Vérifiez si l'utilisateur est autorisé à effectuer cette action
  if (!current_user_can('manage_options')) {
    wp_die('Vous n\'êtes pas autorisé à effectuer cette action.');
  }

  // Vérifiez si les données sont valides
  $length = isset($_POST['length']) ? absint($_POST['length']) : 12;
  $uppercase = isset($_POST['uppercase']) ? true : false;
  $lowercase = isset($_POST['lowercase']) ? true : false;
  $digit = isset($_POST['digit']) ? true : false;
  $symbol = isset($_POST['symbol']) ? true : false;

  // Enregistrer les options
  update_option('password_length', $length);
  update_option('password_uppercase', $uppercase);
  update_option('password_lowercase', $lowercase);
  update_option('password_digit', $digit);
  update_option('password_symbol', $symbol);

  die();
}
add_action('wp_ajax_password_popup_save_options', 'save_password_popup_options');
add_action('wp_ajax_nopriv_password_popup_save_options', 'save_password_popup_options');

 
 /***  Fin des  fonctions pour sauvegarder les options des mots de passe  ***/  
 
// Si la case à cocher 'Interdire les Mots de passe à faible sécurité' est cochée, afficher les options de configuration
function secure_login_customizer_password_security_options() {
if ( get_option( 'secure_login_customizer_password_security' ) ) {
?>
<table class="form-table">
<tr>
<th scope="row"><?php _e( 'Nombre de caractères minimum', 'slc' ); ?></th>
<td>
<input type="number" name="secure_login_customizer_password_min_length" min="1" max="50" value="<?php echo esc_attr( get_option( 'secure_login_customizer_password_min_length', 8 ) ); ?>">
</td>
</tr>
<tr>
<th scope="row"><?php _e( 'Doit contenir des majuscules', 'slc' ); ?></th>
<td>
<input type="checkbox" name="secure_login_customizer_password_require_uppercase" value="1" <?php checked( 1, get_option( 'secure_login_customizer_password_require_uppercase', 0 ) ); ?>>
</td>
</tr>
<tr>
<th scope="row"><?php _e( 'Doit contenir des minuscules', 'slc' ); ?></th>
<td>
<input type="checkbox" name="secure_login_customizer_password_require_lowercase" value="1" <?php checked( 1, get_option( 'secure_login_customizer_password_require_lowercase', 0 ) ); ?>>
</td>
</tr>
<tr>
<th scope="row"><?php _e( 'Doit contenir des chiffres', 'slc' ); ?></th>
<td>
<input type="checkbox" name="secure_login_customizer_password_require_numbers" value="1" <?php checked( 1, get_option( 'secure_login_customizer_password_require_numbers', 0 ) ); ?>>
</td>
</tr>
<tr>
<th scope="row"><?php _e( 'Doit contenir des caractères spéciaux', 'slc' ); ?></th>
<td>
<input type="checkbox" name="secure_login_customizer_password_require_special_chars" value="1" <?php checked( 1, get_option( 'secure_login_customizer_password_require_special_chars', 0 ) ); ?>>
</td>
</tr>
</table>
<?php
}
}

// Action: Enregistrer la valeur de la case à cocher 'Interdire les Mots de passe à faible sécurité'
function save_password_security_state() {
     if ( ! current_user_can( 'manage_options' ) ) {
	wp_die( 'Vous n\'êtes pas autorisé à accéder à cette page.' );
	}
	$value = isset( $_POST['secure_login_customizer_password_security'] ) ? 1 : 0;
	update_option( 'secure_login_customizer_password_security', $value );
	}
add_action( 'admin_post_save_password_security_state', 'save_password_security_state' );

 
function check_and_apply_password_security() {
    $value = get_option('secure_login_customizer_password_security');
    if ($value) {
        // Activer les règles de sécurité des mots de passe
        add_filter('wp_check_password', 'custom_password_check', 10, 4);
    } else {
        // Désactiver les règles de sécurité des mots de passe
        remove_filter('wp_check_password', 'custom_password_check');
    }
}

add_action('wp_loaded', 'check_and_apply_password_security');

// Fonction de vérification des mots de passe
function custom_password_check($pass, $user_id, $old_pass, $user) {
    $min_length = isset($_POST['secure_login_customizer_password_min_length']) ? intval($_POST['secure_login_customizer_password_min_length']) : 8;
    $require_uppercase = isset($_POST['secure_login_customizer_password_require_uppercase']);
    $require_lowercase = isset($_POST['secure_login_customizer_password_require_lowercase']);
    $require_numbers = isset($_POST['secure_login_customizer_password_require_numbers']);
    $require_special_chars = isset($_POST['secure_login_customizer_password_require_special_chars']);

    $errors = new WP_Error();

    // Vérifier la longueur minimale
    if (strlen($pass) < $min_length) {
        $errors->add('password_too_short', sprintf(__('Le mot de passe doit contenir au moins %d caractères.', 'secure-login-customizer'), $min_length));
    }

    // Vérifier s'il doit contenir des majuscules
    if ($require_uppercase && !preg_match('/[A-Z]/', $pass)) {
        $errors->add('password_missing_uppercase', __('Le mot de passe doit contenir des majuscules.', 'secure-login-customizer'));
    }

    // Vérifier s'il doit contenir des minuscules
    if ($require_lowercase && !preg_match('/[a-z]/', $pass)) {
        $errors->add('password_missing_lowercase', __('Le mot de passe doit contenir des minuscules.', 'secure-login-customizer'));
    }

    // Vérifier s'il doit contenir des chiffres
    if ($require_numbers && !preg_match('/[0-9]/', $pass)) {
        $errors->add('password_missing_numbers', __('Le mot de passe doit contenir des chiffres.', 'secure-login-customizer'));
    }

    // Vérifier s'il doit contenir des caractères spéciaux
    if ($require_special_chars && !preg_match('/[^a-zA-Z0-9]/', $pass)) {
        $errors->add('password_missing_special_chars', __('Le mot de passe doit contenir des caractères spéciaux.', 'secure-login-customizer'));
    }

    if (is_wp_error($errors)) {
        return $errors;
    }

    return $pass;
}

// Enregistrer la liste des IPs en blacklist
function save_blacklist_ips() {
if ( isset( $_POST['secure_login_customizer_blacklist_ips'] ) ) {
$ips = sanitize_textarea_field( $_POST['secure_login_customizer_blacklist_ips'] );
update_option( 'secure_login_customizer_blacklist_ips', $ips );
}
}

// Enregistrer la liste des IPs en whitelist
function save_whitelist_ips() {
if ( isset( $_POST['secure_login_customizer_whitelist_ips'] ) ) {
$ips = sanitize_textarea_field( $_POST['secure_login_customizer_whitelist_ips'] );
update_option( 'secure_login_customizer_whitelist_ips', $ips );
}
} 

// Enregistrer le nombre de tentatives de connexion avant blocage
function save_max_login_attempts() {
if ( isset( $_POST['secure_login_customizer_max_login_attempts'] ) ) {
$attempts = intval( $_POST['secure_login_customizer_max_login_attempts'] );
update_option( 'secure_login_customizer_max_login_attempts', $attempts );
}
}

// Enregistrer la durée de blocage du compte
function save_login_lockout_duration() {
if ( isset( $_POST['secure_login_customizer_login_lockout_duration'] ) ) {
$duration = intval( $_POST['secure_login_customizer_login_lockout_duration'] );
update_option( 'secure_login_customizer_login_lockout_duration', $duration );
}
}



