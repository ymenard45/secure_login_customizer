<?php
/*
Plugin Name: Secure Login Customiser
Plugin URI: https://sitewebprodesign.fr
Description: Un plugin d'authentification à deux facteurs pour WordPress en utilisant Google Authenticator
Version: 1.2
Author: Y.MENARD
Author URI: https://sitewebprodesign.fr
License: GPLv2 or later
Text Domain: mon-google-authentificator
*/

// Protection
defined( 'ABSPATH' ) or die( 'No script kiddies please!' );
if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly.
}

// Déclarations :
 define( 'SLC_PLUGIN_VERSION', '1.0.0' );
 define( 'SLC_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );
 define( 'SLC_PLUGIN_URL', plugin_dir_url( __FILE__ ) );

// Initialisation :
add_action( 'admin_menu', 'slc_add_admin_menu' );
add_action( 'admin_init', 'slc_settings_init' );

function slc_add_admin_menu() {
    add_options_page(
        'Secure Login Customizer Settings',
        'SecureLoginCustomizer',
        'manage_options',
        'secure-login-customizer',
        'slc_options_page'
    );
}

// Supprime le code existant pour afficher les messages
remove_action( 'admin_notices', 'slc_display_message' );




function slc_settings_init() {
    register_setting( 'slc_options_group', 'slc_settings' );

    add_settings_section(
        'slc_settings_section',
        __( 'Secure Login Customizer Settings', 'slc' ),
        'slc_settings_section_callback',
        'slc_options_group'
    );

    // Ajouter les onglets
	add_settings_section( 'slc_tab1_section', __( '2FA Settings', 'slc' ), 'slc_tab1_callback', 'slc_options_group' );

    add_settings_section(
        'slc_tab2_section',
        __( 'Tab 2', 'slc' ),
        'slc_tab2_section_callback',
        'slc_options_group'
    );
    add_settings_section(
        'slc_tab3_section',
        __( 'Tab 3', 'slc' ),
        'slc_tab3_section_callback',
        'slc_options_group'
    );
    add_settings_section(
        'slc_tab4_section',
        __( 'Tab 4', 'slc' ),
        'slc_tab4_section_callback',
        'slc_options_group'
    );
    add_settings_section(
        'slc_tab5_section',
        __( 'Tab 5', 'slc' ),
        'slc_tab5_section_callback',
        'slc_options_group'
    );

    // Ajouter les champs de saisie pour chaque onglet
    slc_tab1_settings_init();
    slc_tab2_settings_init();
    slc_tab3_settings_init();
    slc_tab4_settings_init();
    slc_tab5_settings_init();
}

// Fonction générale pour l'affichage des options et des onglets 

function slc_options_page() {
    $active_tab = $_GET['tab'] ?? 'slc_tab1_section';
	?>
    <div class="wrap">
        <h1><?php echo esc_html( get_admin_page_title() ); ?></h1>
        <form action="options.php" method="post">
            <?php settings_fields( 'slc_options_group' ); ?>
            <?php ddo_settings_sections( $active_tab ); ?>
             
        </form>

    </div>
    <?php
}

// Fonctions pour l'affichage des champs de saisie des onglets

/***  Onglet 1 ***/

function slc_tab1_settings_init() {
    add_settings_field(
        'slc_enable_2fa',
        __( 'Enable 2FA Authentication', 'slc' ),
        'slc_enable_2fa_callback',
        'slc_options_group',
        'slc_tab1_section'
    );

    add_settings_field(
        'slc_enable_backup_code',
        __( 'Enable Backup Code', 'slc' ),
        'slc_enable_backup_code_callback',
        'slc_options_group',
        'slc_tab1_section'
    );

    add_settings_field(
        'slc_restrict_2fa_deactivation',
        __( 'Restrict 2FA Deactivation', 'slc' ),
        'slc_restrict_2fa_deactivation_callback',
        'slc_options_group',
        'slc_tab1_section'
    );

    add_settings_field(
        'slc_2fa_security_groups',
        __( '2FA Security Groups', 'slc' ),
        'slc_2fa_security_groups_callback',
        'slc_options_group',
        'slc_tab1_section'
    );
}


// zone activation 2FA Saisie + validation

function secure_login_customizer_tab_2fa() {
  
    echo '<p class="slc-description">Configurez ici les options de l\'authentification à deux facteurs (2FA).</p>';
    slc_enable_2fa_callback();
    slc_enable_backup_code_callback();
    slc_disable_2fa_deactivation_callback();
    slc_security_groups_callback();
}

 

function slc_enable_2fa_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_2fa'] ) ? checked( $options['enable_2fa'], true, false ) : '';
    $html = '<div><input type="checkbox" id="slc_enable_2fa" name="slc_options[enable_2fa]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_2fa">' . __( 'Enable 2FA Authentication', 'slc' ) . '</label></div>';
    echo $html;
}


/*  function slc_enable_2fa_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_2fa'] ) ? checked( $options['enable_2fa'], true, false ) : '';
    $html = '<div><input type="checkbox" id="slc_enable_2fa" name="slc_options[enable_2fa]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_2fa">' . __( 'Enable 2FA Authentication', 'slc' ) . '</label></div>';
    echo $html;
} 
 */
function slc_enable_2fa_validate( $input ) {
    $valid = array();
    $valid['enable_2fa'] = isset( $input['enable_2fa'] ) ? true : false;
    return $valid;
}


// Case à cocher "Activer Backup Code"  Saisie + validation

function slc_enable_backup_code_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_backup_code'] ) ? checked( $options['enable_backup_code'], true, false ) : '';
    $html = '<div></br><input type="checkbox" id="slc_enable_backup_code" name="slc_options[enable_backup_code]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_backup_code">' . __( 'Enable Backup Code', 'slc' ) . '</label></div>';
    echo $html;
}

function slc_enable_backup_code_validate( $input ) {
    $valid = array();
    $valid['enable_backup_code'] = isset( $input['enable_backup_code'] ) ? true : false;
    return $valid;
}


// Case à cocher "Interdire la désactivation de 2FA Authentication"  Saisie + validation

function slc_disable_2fa_deactivation_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['disable_2fa_deactivation'] ) ? checked( $options['disable_2fa_deactivation'], true, false ) : '';
    $html = '<div></br><input type="checkbox" id="slc_disable_2fa_deactivation" name="slc_options[disable_2fa_deactivation]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_disable_2fa_deactivation">' . __( 'Activer / désactiver 2FA pour les groupes suivants', 'slc' ) . '</label></br></div>';
    echo $html;
}

function slc_disable_2fa_deactivation_validate( $input ) {
    $valid = array();
    $valid['disable_2fa_deactivation'] = isset( $input['disable_2fa_deactivation'] ) ? true : false;
    return $valid;
}


// Case à cocher de sélection des groupes de sécurité ou 2FA sera activée   Saisie + validation
function slc_security_groups_callback() {
    $options = get_option( 'slc_options' );
    $html = '<div></br>Sélection des groupes de sécurité</br></br>';
    $user_roles = get_editable_roles();
    foreach ( $user_roles as $role_name => $role_info ) {
        $checked = isset( $options['security_groups'][ $role_name ] ) ? checked( $options['security_groups'][ $role_name ], true, false ) : '';
        $html .= '<div><input type="checkbox" id="slc_security_groups_' . $role_name . '" name="slc_options[security_groups][' . $role_name . ']" value="1" ' . $checked . '/>';
        $html .= '<label for="slc_security_groups_' . $role_name . '">' . $role_info['name'] . '</label><br></div>';
    }
    echo $html;
}


function slc_security_groups_validate( $input ) {
    $valid = array();
    if ( isset( $input['security_groups'] ) ) {
        $security_groups = array_filter( $input['security_groups'], fn($role) => in_array( $role, array( 'administrator', 'shop_manager', 'editor', 'author', 'contributor', 'subscriber' ) ) );
        $valid['security_groups'] = $security_groups;
    }
    return $valid; 
}	
	

/***  Onglet 2  CHAMP  ***/
 
function slc_tab2_settings_init() {
    add_settings_field(
        'slc_enable_security_headers',
        __( 'Enable Security Headers', 'slc' ),
        'slc_enable_security_headers_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_anonymize_messages',
        __( 'Anonymize Messages', 'slc' ),
        'slc_anonymize_messages_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_reject_proxy_connections',
        __( 'Reject Proxy Connections', 'slc' ),
        'slc_reject_proxy_connections_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_reject_weak_passwords',
        __( 'Reject Weak Passwords', 'slc' ),
        'slc_reject_weak_passwords_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_blacklist',
        __( 'Blacklist', 'slc' ),
        'slc_blacklist_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_whitelist',
        __( 'Whitelist', 'slc' ),
        'slc_whitelist_callback',
        'slc_options_group',
        'slc_tab2_section'
    );

    add_settings_field(
        'slc_max_login_attempts',
        __( 'Max Login Attempts', 'slc' ),
        'slc_max_login_attempts_callback',
        'slc_options_group',
        'slc_tab2_section'
    );
}


/***  Onglet 2  SAISIE ET VALIDATION***/
  
  // Case à cocher "Activer Security Headers" Saisie + Validation
  
  
     // Insérez ici le code pour afficher le contenu de l'onglet SECURITY
 
  
  
function slc_enable_security_headers_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_security_headers'] ) ? checked( $options['enable_security_headers'], true, false ) : '';
    $html = '<input type="checkbox" id="slc_enable_security_headers" name="slc_options[enable_security_headers]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_security_headers">' . __( 'Enable Security Headers', 'slc' ) . '</label>';
    echo $html;
}

function slc_enable_security_headers_validate( $input ) {
    $valid = array();
    $valid['enable_security_headers'] = isset( $input['enable_security_headers'] ) ? true : false;
    return $valid;
}

// Case à cocher "Activer l'anonymisation des messages"
function slc_enable_message_anonymization_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['enable_message_anonymization'] ) ? checked( $options['enable_message_anonymization'], true, false ) : '';
    $html = '<input type="checkbox" id="slc_enable_message_anonymization" name="slc_options[enable_message_anonymization]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_enable_message_anonymization">' . __( 'Enable Message Anonymization', 'slc' ) . '</label>';
    echo $html;
}

function slc_enable_message_anonymization_validate( $input ) {
    $valid = array();
    $valid['enable_message_anonymization'] = isset( $input['enable_message_anonymization'] ) ? true : false;
    return $valid;
}

// Case à cocher "Refuser les connexions depuis un proxy"
function slc_disable_proxy_connections_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['disable_proxy_connections'] ) ? checked( $options['disable_proxy_connections'], true, false ) : '';
    $html = '<input type="checkbox" id="slc_disable_proxy_connections" name="slc_options[disable_proxy_connections]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_disable_proxy_connections">' . __( 'Disable Proxy Connections', 'slc' ) . '</label>';
    echo $html;
}

function slc_disable_proxy_connections_validate( $input ) {
    $valid = array();
    $valid['disable_proxy_connections'] = isset( $input['disable_proxy_connections'] ) ? true : false;
    return $valid;
}

// Case à cocher "Interdire les Mots de passe à faible sécurité"
function slc_disable_weak_passwords_callback() {
    $options = get_option( 'slc_options' );
    $checked = isset( $options['disable_weak_passwords'] ) ? checked( $options['disable_weak_passwords'], true, false ) : '';
    $html = '<input type="checkbox" id="slc_disable_weak_passwords" name="slc_options[disable_weak_passwords]" value="1" ' . $checked . '/>';
    $html .= '<label for="slc_disable_weak_passwords">' . __( 'Disable Weak Passwords', 'slc' ) . '</label>';
    echo $html;
}

function slc_disable_weak_passwords_validate( $input ) {
    $valid = array();
    $valid['disable_weak_passwords'] = isset( $input['disable_weak_passwords'] ) ? true : false;
    return $valid;
}

// Zone de saisie "Blacklist"
function slc_blacklist_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['blacklist'] ) ? sanitize_text_field( $options['blacklist'] ) : '';
    $html = '<textarea id="slc_blacklist" name="slc_options[blacklist]" rows="5" cols="50">' . $value . '</textarea>';
    echo $html;
}

function slc_blacklist_validate( $input ) {
    $valid = array();
    $valid['blacklist'] = isset( $input['blacklist'] ) ? sanitize_text_field( $input['blacklist'] ) : '';
    return $valid;
}

// Zone de saisie "Whitelist"
function slc_whitelist_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['whitelist'] ) ? sanitize_text_field( $options['whitelist'] ) : '';
    $html = '<textarea id="slc_whitelist" name="slc_options[whitelist]" rows="5" cols="50">' . $value . '</textarea>';
    echo $html;
}

function slc_whitelist_validate( $input ) {
    $valid = array();
    $valid['whitelist'] = isset( $input['whitelist'] ) ? sanitize_text_field( $input['whitelist'] ) : '';
    return $valid;
}

// Zone de saisie "Nombre de tentatives de connexions avant désactivation"
function slc_max_login_attempts_callback() {
    $options = get_option( 'slc_options' );
    $max_login_attempts = isset( $options['max_login_attempts'] ) ? esc_attr( $options['max_login_attempts'] ) : '';
    echo '<input type="number" min="0" max="20" id="max_login_attempts" name="slc_options[max_login_attempts]" value="' . $max_login_attempts . '"/>';
}

function slc_max_login_attempts_validate( $input ) {
    $valid = array();
    $valid['max_login_attempts'] = isset( $input['max_login_attempts'] ) ? absint( $input['max_login_attempts'] ) : 0;
    return $valid;
}

// Zone de saisie "Temps de blocage du compte"
function slc_account_block_time_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['account_block_time'] ) ? absint( $options['account_block_time'] ) : 0;
    $html = '<input type="number" id="slc_account_block_time" name="slc_options[account_block_time]" min="0" max="300" value="' . $value . '" />';
    echo $html;
}

function slc_account_block_time_validate( $input ) {
    $valid = array();
    $valid['account_block_time'] = isset( $input['account_block_time'] ) ? absint( $input['account_block_time'] ) : 0;
    return $valid;
}

function secure_login_customizer_tab_security() {
    echo '<h2>Security</h2>';
    echo '<p>Configurez ici les options de sécurité de votre site.</p>';
}



/***  Onglet 3 ***/
	 
	function slc_tab3_settings_init() {
	add_settings_field(
	'slc_login_logo_url',
	__( 'Login Logo URL', 'slc' ),
	'slc_login_logo_url_callback',
	'slc_options_group',
	'slc_tab3_section'
	);

	 
	add_settings_field(
		'slc_desktop_logo_url',
		__( 'Desktop Logo URL', 'slc' ),
		'slc_desktop_logo_url_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_mobile_logo_url',
		__( 'Mobile Logo URL', 'slc' ),
		'slc_mobile_logo_url_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_button_color',
		__( 'Button Color', 'slc' ),
		'slc_button_color_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_background_color',
		__( 'Background Color', 'slc' ),
		'slc_background_color_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_text_color',
		__( 'Text Color', 'slc' ),
		'slc_text_color_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_border_color',
		__( 'Border Color', 'slc' ),
		'slc_border_color_callback',
		'slc_options_group',
		'slc_tab3_section'
	);

	add_settings_field(
		'slc_opacity_level',
		__( 'Opacity Level', 'slc' ),
		'slc_opacity_level_callback',
		'slc_options_group',
		'slc_tab3_section'
	);
	}
 
// Zone de saisie "Url du logo"  Saisie + Controle + validation
 
function slc_logo_url_callback() {
    $options = get_option( 'slc_options' );
    $logo_url = isset( $options['logo_url'] ) ? esc_url_raw( $options['logo_url'] ) : '';
    echo '<input type="url" id="logo_url" name="slc_options[logo_url]" value="' . $logo_url . '"> ';
}


// Fonction de validation pour l'URL du logo
function slc_logo_url_validate( $input ) {
    $valid = array();
    if ( isset( $input['logo_url'] ) ) {
        if ( ! filter_var( $input['logo_url'], FILTER_VALIDATE_URL ) ) {
            add_settings_error(
                'slc_logo_url',
                'invalid_url',
                __( 'Invalid URL. Please enter a valid URL.', 'slc' )
            );
        } else {
            $valid['logo_url'] = esc_url_raw( $input['logo_url'] );
        }
    }
    return $valid;
}

 

// Zone de saisie "Url pour desktop"
function slc_desktop_url_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['desktop_url'] ) ? esc_url_raw( $options['desktop_url'] ) : '';
    $html = '<input type="text" id="slc_desktop_url" name="slc_options[desktop_url]" value="' . $value . '" />';
    echo $html;
}

function slc_desktop_url_validate( $input ) {
    $valid = array();
    $valid['desktop_url'] = isset( $input['desktop_url'] ) ? esc_url_raw( $input['desktop_url'] ) : '';
    return $valid;
}

// Zone de saisie "Url pour mobile"
function slc_mobile_url_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['mobile_url'] ) ? esc_url_raw( $options['mobile_url'] ) : '';
    $html = '<input type="text" id="slc_mobile_url" name="slc_options[mobile_url]" value="' . $value . '" />';
    echo $html;
}

function slc_mobile_url_validate( $input ) {
    $valid = array();
    $valid['mobile_url'] = isset( $input['mobile_url'] ) ? esc_url_raw( $input['mobile_url'] ) : '';
    return $valid;
}

// Zone de saisie "Couleur du bouton"
function slc_button_color_callback() {
    $options = get_option( 'slc_options' );
    $value = isset( $options['button_color'] ) ? sanitize_hex_color( $options['button_color'] ) : '';
    $html = '<input type="text" id="slc_button_color" name="slc_options[button_color]" value="' . $value . '" />';
    echo $html;
}

function slc_button_color_validate( $input ) {
    $valid = array();
    $valid['button_color'] = isset( $input['button_color'] ) ? sanitize_hex_color( $input['button_color'] ) : '';
    return $valid;
}

// Zone de saisie "Couleur du texte"
function slc_text_color_callback() {
$options = get_option( 'slc_options' );
$value = isset( $options['text_color'] ) ? sanitize_hex_color( $options['text_color'] ) : '';
$html = '<input type="text" id="slc_text_color" name="slc_options[text_color]" value="' . $value . '" />';
echo $html;
}

function slc_text_color_validate( $input ) {
$valid = array();
$valid['text_color'] = isset( $input['text_color'] ) ? sanitize_hex_color( $input['text_color'] ) : '';
return $valid;
}

// Zone de saisie "Couleur des bords"
function slc_border_color_callback() {
$options = get_option( 'slc_options' );
$value = isset( $options['border_color'] ) ? sanitize_hex_color( $options['border_color'] ) : '';
$html = '<input type="text" id="slc_border_color" name="slc_options[border_color]" value="' . $value . '" />';
echo $html;
}

function slc_border_color_validate( $input ) {
$valid = array();
$valid['border_color'] = isset( $input['border_color'] ) ? sanitize_hex_color( $input['border_color'] ) : '';
return $valid;
}

// Zone de saisie "Niveau de transparence"
function slc_transparency_level_callback() {
$options = get_option( 'slc_options' );
$value = isset( $options['transparency_level'] ) ? absint( $options['transparency_level'] ) : '';
$html = '<input type="number" min="0" max="100" id="slc_transparency_level" name="slc_options[transparency_level]" value="' . $value . '" />';
echo $html;
}

function slc_transparency_level_validate( $input ) {
$valid = array();
$valid['transparency_level'] = isset( $input['transparency_level'] ) ? absint( $input['transparency_level'] ) : '';
return $valid;
}



/***  Onglet 4 ***/

	function slc_tab4_settings_init() {
	add_settings_field(
	'slc_qr_code_page_url',
	__( 'QR Code Page URL', 'slc' ),
	'slc_qr_code_page_url_callback',
	'slc_options_group',
	'slc_tab4_section'
	);
	}
	
/*** Onglet 5 ***/	

function slc_tab5_settings_init() {

    register_setting( 'slc_tab5', 'slc_verification_input_label', 'sanitize_text_field' );
    register_setting( 'slc_tab5', 'slc_verification_input_placeholder', 'sanitize_text_field' );
    register_setting( 'slc_tab5', 'slc_verification_input_btn_text', 'sanitize_text_field' );

    add_settings_section(
        'slc_tab5_section',
        __( 'Verification Input', 'slc' ),
        'slc_tab5_section_callback',
        'slc_tab5'
    );

    add_settings_field(
        'slc_verification_input_label',
        __( 'Label', 'slc' ),
        'slc_verification_input_label_callback',
        'slc_tab5',
        'slc_tab5_section'
    );

    add_settings_field(
        'slc_verification_input_placeholder',
        __( 'Placeholder', 'slc' ),
        'slc_verification_input_placeholder_callback',
        'slc_tab5',
        'slc_tab5_section'
    );

    add_settings_field(
        'slc_verification_input_btn_text',
        __( 'Button Text', 'slc' ),
        'slc_verification_input_btn_text_callback',
        'slc_tab5',
        'slc_tab5_section'
    );

}

function slc_tab5_section_callback() {
    // Fonction pour afficher le texte d'explication de la section
}

function slc_verification_input_label_callback() {
    ?>
    <input type="text" name="slc_verification_input_label" value="<?php echo esc_attr( get_option( 'slc_verification_input_label', '' ) ); ?>" />
    <?php
}

function slc_verification_input_placeholder_callback() {
    ?>
    <input type="text" name="slc_verification_input_placeholder" value="<?php echo esc_attr( get_option( 'slc_verification_input_placeholder', '' ) ); ?>" />
    <?php
}

function slc_verification_input_btn_text_callback() {
    ?>
    <input type="text" name="slc_verification_input_btn_text" value="<?php echo esc_attr( get_option( 'slc_verification_input_btn_text', '' ) ); ?>" />
    <?php
}

function slc_plugin_init() {
    // Code de votre fonction ici
}
add_action( 'admin_init', 'slc_plugin_init' );	


/***                       ***/

function ddo_settings_sections( $page ) {
    global $wp_settings_sections, $wp_settings_fields;

    if ( ! isset( $wp_settings_sections ) || ! isset( $wp_settings_sections[ $page ] ) ) {
        return;
    }

    echo '<div class="wrap">';
    do_action( 'ddo_settings_sections_' . $page );
    echo '<form method="post" action="options.php">';
    wp_nonce_field( 'update-options' );

    foreach ( (array) $wp_settings_sections[ $page ] as $section ) {
        echo '<h3>' . esc_html( $section['title'] ) . '</h3>';
        echo '<p>' . esc_html( $section['description'] ) . '</p>';
        if ( ! isset( $wp_settings_fields ) || ! isset( $wp_settings_fields[ $page ][ $section['id'] ] ) ) {
            continue;
        }
        echo '<table class="form-table">';
        do_action( 'ddo_settings_fields_' . $page . '_' . $section['id'] );
        echo '</table>';
    }

    
    echo '</form>
	submit_button();
	</div>';
}




/*** Fonction de validation des options ***/	
	
// Fonction de validation pour les options
function slc_options_validate( $input ) {
    $valid = array();
    
    // Validation pour l'onglet 1
    if ( isset( $input['enable_2fa'] ) ) {
        $valid['enable_2fa'] = 1;
    }
    if ( isset( $input['enable_backup_codes'] ) ) {
        $valid['enable_backup_codes'] = 1;
    }
    if ( isset( $input['disable_2fa_deactivation'] ) ) {
        $valid['disable_2fa_deactivation'] = 1;
    }
    if ( isset( $input['security_groups'] ) ) {
        $valid['security_groups'] = sanitize_text_field( $input['security_groups'] );
    }
    
    // Validation pour l'onglet 2
    if ( isset( $input['enable_security_headers'] ) ) {
        $valid['enable_security_headers'] = 1;
    }
    if ( isset( $input['anonymize_messages'] ) ) {
        $valid['anonymize_messages'] = 1;
    }
    if ( isset( $input['block_proxy_connections'] ) ) {
        $valid['block_proxy_connections'] = 1;
    }
    if ( isset( $input['enable_strong_passwords'] ) ) {
        $valid['enable_strong_passwords'] = 1;
    }
    if ( isset( $input['blacklist'] ) ) {
        $valid['blacklist'] = sanitize_text_field( $input['blacklist'] );
    }
    if ( isset( $input['whitelist'] ) ) {
        $valid['whitelist'] = sanitize_text_field( $input['whitelist'] );
    }
    if ( isset( $input['max_login_attempts'] ) ) {
        $valid['max_login_attempts'] = absint( $input['max_login_attempts'] );
    }
    if ( isset( $input['account_lock_time'] ) ) {
        $valid['account_lock_time'] = absint( $input['account_lock_time'] );
    }
    
        // Validation pour l'onglet 3
    if ( isset( $input['logo_url'] ) ) {
        if ( ! filter_var( $input['logo_url'], FILTER_VALIDATE_URL ) ) {
            add_settings_error(
                'slc_logo_url',
                'invalid_url',
                __( 'Invalid URL. Please enter a valid URL.', 'slc' )
            );
        } else {
            $valid['logo_url'] = esc_url_raw( $input['logo_url'] );
        }
    }
    if ( isset( $input['desktop_url'] ) ) {
        $valid['desktop_url'] = esc_url_raw( $input['desktop_url'] );
    }
    if ( isset( $input['mobile_url'] ) ) {
        $valid['mobile_url'] = esc_url_raw( $input['mobile_url'] );
    }
    if ( isset( $input['button_color'] ) ) {
        $valid['button_color'] = sanitize_hex_color( $input['button_color'] );
    }
    if ( isset( $input['background_color'] ) ) {
        $valid['background_color'] = sanitize_hex_color( $input['background_color'] );
    }
    if ( isset( $input['text_color'] ) ) {
        $valid['text_color'] = sanitize_hex_color( $input['text_color'] );
    }
    if ( isset( $input['border_color'] ) ) {
        $valid['border_color'] = sanitize_hex_color( $input['border_color'] );
    }
    if ( isset( $input['transparency'] ) ) {
        $valid['transparency'] = absint( $input['transparency'] );
    }
    
    // Validation pour l'onglet 4
    if ( isset( $input['qr_code_page_url'] ) ) {
        $valid['qr_code_page_url'] = esc_url_raw( $input['qr_code_page_url'] );
    }
    if ( isset( $input['secret_code_page_url'] ) ) {
        $valid['secret_code_page_url'] = esc_url_raw( $input['secret_code_page_url'] );
    }
    if ( isset( $input['disable_account_page_url'] ) ) {
        $valid['disable_account_page_url'] = esc_url_raw( $input['disable_account_page_url'] );
    }
    
    // Retourne les options valides
    return $valid;
}


// Ajout des onglets
add_action( 'admin_init', 'slc_tab1_settings_init' );
add_action( 'admin_init', 'slc_tab2_settings_init' );
add_action( 'admin_init', 'slc_tab3_settings_init' );
add_action( 'admin_init', 'slc_tab4_settings_init' );

// Ajout des fonctions pour la création des onglets
add_action( 'slc_options_tabs', 'slc_options_tab1' );
add_action( 'slc_options_tabs', 'slc_options_tab2' );
add_action( 'slc_options_tabs', 'slc_options_tab3' );
add_action( 'slc_options_tabs', 'slc_options_tab4' );
add_action( 'slc_options_tabs', 'slc_options_tab5' );

// Initialisation du plugin
add_action( 'admin_init', 'slc_plugin_init' );


function secure_login_customizer_menu() {
    add_options_page(
        'Secure Login Customizer',
        'Secure Login Customizer',
        'manage_options',
        'secure-login-customizer',
        'secure_login_customizer_admin_page',
		'dashicons-shield'
    );
}



// Add the admin menu
add_action('admin_menu', 'secure_login_customizer_menu');


function secure_login_customizer_tab_messages() {
    // Insérez ici le code pour afficher le contenu de l'onglet "Customisation Messages"
    echo '<h2>Customisation Messages</h2>';
    echo '<p>Personnalisez ici les messages affichés sur la page de connexion.</p>';
}

/*
La fonction secure_login_customizer_init utilise register_setting(), 
add_settings_section() et add_settings_field() pour définir les groupes
d'options, sections et champs pour chaque onglet. 
*/

function secure_login_customizer_init() {
    // Onglet 2FA
    register_setting(
        'secure_login_customizer_2fa_options_group',
        'secure_login_customizer_2fa_options',
        'slc_enable_2fa_validate'
    );

    add_settings_section(
        'slc_2fa_options_section',
        '',
        '',
        'secure_login_customizer_2fa_options_group'
    );

    add_settings_field(
        'slc_enable_2fa',
        __('Enable 2FA Authentication', 'slc'),
        'slc_enable_2fa_callback',
        'secure_login_customizer_2fa_options_group',
        'slc_2fa_options_section'
    );

    // Onglet Security
    register_setting(
        'secure_login_customizer_security_options_group',
        'secure_login_customizer_security_options',
        'slc_security_options_validate'
    );

    add_settings_section(
        'slc_security_options_section',
        '',
        '',
        'secure_login_customizer_security_options_group'
    );

    add_settings_field(
        'slc_enable_security_headers',
        __('Enable Security Headers', 'slc'),
        'slc_enable_security_headers_callback',
        'secure_login_customizer_security_options_group',
        'slc_security_options_section'
    );
    // Onglet Customization
    register_setting(
        'secure_login_customizer_customization_options_group',
        'secure_login_customizer_customization_options',
        'slc_customization_options_validate'
    );

    add_settings_section(
        'slc_customization_options_section',
        '',
        '',
        'secure_login_customizer_customization_options_group'
    );

    add_settings_field(
        'slc_custom_login_logo',
        __('Custom Login Logo', 'slc'),
        'slc_custom_login_logo_callback',
        'secure_login_customizer_customization_options_group',
        'slc_customization_options_section'
    );

    // Onglet Logging
    register_setting(
        'secure_login_customizer_logging_options_group',
        'secure_login_customizer_logging_options',
        'slc_logging_options_validate'
    );

    add_settings_section(
        'slc_logging_options_section',
        '',
        '',
        'secure_login_customizer_logging_options_group'
    );

    add_settings_field(
        'slc_enable_logging',
        __('Enable Logging', 'slc'),
        'slc_enable_logging_callback',
        'secure_login_customizer_logging_options_group',
        'slc_logging_options_section'
    );
    // Onglet Advanced
    register_setting(
        'secure_login_customizer_advanced_options_group',
        'secure_login_customizer_advanced_options',
        'slc_advanced_options_validate'
    );

    add_settings_section(
        'slc_advanced_options_section',
        '',
        '',
        'secure_login_customizer_advanced_options_group'
    );

    add_settings_field(
        'slc_custom_captcha_site_key',
        __('Custom Captcha Site Key', 'slc'),
        'slc_custom_captcha_site_key_callback',
        'secure_login_customizer_advanced_options_group',
        'slc_advanced_options_section'
    );
}

add_action('admin_init', 'secure_login_customizer_init');




/*** ajout lien settings  ***/
function secure_login_customizer_add_plugin_settings_link( $links ) {
    $settings_link = '<a href="admin.php?page=secure-login-customizer">' . __( 'Settings', 'slc' ) . '</a>';
    array_unshift( $links, $settings_link );
    return $links;
}
add_filter( 'plugin_action_links_' . plugin_basename( __FILE__ ), 'secure_login_customizer_add_plugin_settings_link' );



/*** secure_login_customizer_admin_page ***/

function secure_login_customizer_admin_page() {
    // Set active tab
    $active_tab = isset( $_GET['tab'] ) ? $_GET['tab'] : '2fa';

    ?>
	   <style>
        h1  {
            font-size: 3em;
            color: #0073aa;
        }
        h2.nav-tab-wrapper .nav-tab {
            font-size: 1em;
            color: #0073aa;
		}	

			#setting-error-settings_updated {
				position: fixed;
				bottom: 0;
				width: 100%;
				margin-bottom: 60px;
				font-size: 1.5em;
				color: #0073aa;				
			}
    </style>
    <div class="wrap">
	
	
        
        <p><?php _e( 'Customize your WordPress login page with Secure Login Customizer!', 'slc' ); ?></p>
        <h2 class="nav-tab-wrapper">
        <h2 class="nav-tab-wrapper">
            <a href="?page=secure-login-customizer&tab=2fa" class="nav-tab <?php echo $active_tab == '2fa' ? 'nav-tab-active' : ''; ?>"><?php _e('2FA', 'slc'); ?></a>
            <a href="?page=secure-login-customizer&tab=security" class="nav-tab <?php echo $active_tab == 'security' ? 'nav-tab-active' : ''; ?>"><?php _e('Security', 'slc'); ?></a>
            <a href="?page=secure-login-customizer&tab=customization" class="nav-tab <?php echo $active_tab == 'customization' ? 'nav-tab-active' : ''; ?>"><?php _e('Customization', 'slc'); ?></a>
            <a href="?page=secure-login-customizer&tab=logging" class="nav-tab <?php echo $active_tab == 'logging' ? 'nav-tab-active' : ''; ?>"><?php _e('Logging', 'slc'); ?></a>
            <a href="?page=secure-login-customizer&tab=advanced" class="nav-tab <?php echo $active_tab == 'advanced' ? 'nav-tab-active' : ''; ?>"><?php _e('Advanced', 'slc'); ?></a>
          </h2>
        <form method="post" action="options.php">
            <?php
            settings_fields( 'slc_options_group' );
            do_settings_sections( 'secure-login-customizer' );

            switch ( $active_tab ) {
                case '2fa':
                    secure_login_customizer_tab_2fa();
                    break;
                case 'security':
                    secure_login_customizer_tab_security();
                    break;
                case 'customization':
                    echo '<p>Contenu de l\'onglet Customization</p>';
                    break;
                case 'advanced':
                    echo '<p>Contenu de l\'onglet Advanced</p>';
                    break;
				case 'Logging':
                    echo '<p>Contenu de l\'onglet Advanced</p>';
                    break;
                default:
                    secure_login_customizer_tab_2fa();
                    break;
            }

            submit_button(); 
            ?>
			
        </form>
    </div>
    <?php
}


function slc_load_textdomain() {
    load_plugin_textdomain( 'slc', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );
}

// Chargement du fichier de traduction
add_action( 'plugins_loaded', 'slc_load_textdomain' );

function slc_activate_plugin() {
    // Création des options du plugin
    $options = array(
        'enable_2fa' => false,
        'enable_backup_code' => false,
        'restrict_2fa_deactivation' => false,
        '2fa_security_groups' => '',
        'enable_security_headers' => false,
        'anonymize_messages' => false,
        'reject_proxy_connections' => false,
        'reject_weak_passwords' => false,
        'blacklist' => '',
        'whitelist' => '',
        'max_login_attempts' => 5,
        'account_lockout_time' => 5,
        'login_logo_url' => '',
        'desktop_logo_url' => '',
        'mobile_logo_url' => '',
        'button_color' => '',
        'background_color' => '',
        'text_color' => '',
        'border_color' => '',
        'opacity_level' => 100,
        'qr_code_page_url' => '',
        'secret_code_page_url' => '',
        'disable_account_page_url' => ''
    );

    // Enregistrement des options du plugin
    add_option( 'slc_options', $options );

    // Création de la table de la liste noire (blacklist) si elle n'existe pas
    global $wpdb;
    $table_name = esc_sql( $wpdb->prefix . 'slc_blacklist' );
    $charset_collate = $wpdb->get_charset_collate();

    $sql = "CREATE TABLE IF NOT EXISTS $table_name (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        ip varchar(39) NOT NULL,
        PRIMARY KEY  (id)
    ) $charset_collate;";

    require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
    dbDelta( $sql );
}

// Activation du plugin
register_activation_hook( __FILE__, 'slc_activate_plugin' );


/***  Gestion de l'onglet 2 ***/
 
/**
 * Crée les pages de menu et les onglets.
 */
function slc_add_menu_pages() {
	// Créer la page d'options des en-têtes de sécurité.
	add_menu_page(
		__( 'En-têtes de sécurité', 'slc' ),
		__( 'Sécurité', 'slc' ),
		'manage_options',
		'slc_security_headers_options_page',
		'slc_security_headers_options_page_callback',
		'dashicons-shield-alt',
		30
	);

	// Créer la page d'options de sécurité supplémentaires.
	add_menu_page(
		__( 'Sécurité Plus', 'slc' ),
		__( 'Sécurité Plus', 'slc' ),
		'manage_options',
		'slc_security_plus_options_page',
		'slc_security_headers_options_page_callback',
		'dashicons-lock',
		31
	);
}

/**
 * Fonction pour afficher le contenu de la page "En-têtes de sécurité" et "Sécurité Plus".
 */
function slc_security_headers_options_page_callback() {
	// Vérifier quel onglet est sélectionné et charger le contenu approprié.
	if ( isset( $_GET['page'] ) && $_GET['page'] === 'slc_security_plus_options_page' ) {
		// Afficher le contenu de l'onglet "Sécurité Plus".
?>
		<div class="wrap">
			<h1><?php _e( 'Sécurité Plus', 'slc' ); ?></h1>
			<form method="post" action="options.php">
				<?php
					settings_fields( 'slc_security_plus_options_group' );
					do_settings_sections( 'slc_security_plus_options_page' );
					submit_button();
				?>
			</form>
		</div>
<?php
	} else {
		// Afficher le contenu de l'onglet "En-têtes de sécurité".
?>
		<div class="wrap">
			<h1><?php _e( 'En-têtes de sécurité', 'slc' ); ?></h1>
			<form method="post" action="options.php">
				<?php
					settings_fields( 'slc_security_headers_options_group' );
					do_settings_sections( 'slc_security_headers_options_page' );
					submit_button();
				?>
			</form>
		</div>
<?php
	}
}




// Fonction pour afficher le contenu de la page "Sécurité Plus"
function slc_security_plus_options_page_callback() {
?>
    <div class="wrap">
        <h1><?php _e( 'Sécurité Plus', 'slc' ); ?></h1>
        <form method="post" action="options.php">
            <?php
                settings_fields( 'slc_security_plus_options_group' );
                do_settings_sections( 'slc_security_plus_options_page' );
                submit_button();
            ?>
        </form>
    </div>
<?php
}

// Fonction pour initialiser les sections et les champs de la page "Sécurité Plus"
function slc_security_plus_initialize_options() {
    // Section "Refuser les connexions depuis un proxy"
    add_settings_section(
        'slc_block_proxy_section',
        __( 'Refuser les connexions depuis un proxy', 'slc' ),
        'slc_block_proxy_section_description',
        'slc_security_plus_options_page'
    );
    add_settings_field(
        'slc_block_proxy',
        __( 'Activer le blocage des connexions depuis un proxy', 'slc' ),
        'slc_block_proxy_field_callback',
        'slc_security_plus_options_page',
        'slc_block_proxy_section'
    );
    register_setting(
        'slc_security_plus_options_group',
        'slc_block_proxy',
        array(
            'type' => 'boolean',
            'sanitize_callback' => 'slc_sanitize_boolean',
            'default' => false,
        )
    );
    
    // Section "Interdire les Mots de passe à faible sécurité"
    add_settings_section(
        'slc_strong_passwords_section',
        __( 'Interdire les Mots de passe à faible sécurité', 'slc' ),
        'slc_strong_passwords_section_description',
        'slc_security_plus_options_page'
    );
    add_settings_field(
        'slc_strong_passwords',
        __( 'Activer l\'interdiction des Mots de passe à faible sécurité', 'slc' ),
        'slc_strong_passwords_field_callback',
        'slc_security_plus_options_page',
        'slc_strong_passwords_section'
    );
    register_setting(
        'slc_security_plus_options_group',
        'slc_strong_passwords',
        array(
            'type' => 'boolean',
            'sanitize_callback' => 'slc_sanitize_boolean',
            'default' => false,
        )
    );
    add_settings_field(
        'slc_password_length',
        __( 'Longueur minimale du mot de passe', 'slc' ),
        'slc_password_length_field_callback',
        'slc_security_plus_options_page',
        'slc_strong_passwords_section',
        array(
            'label_for' => 'slc_password_length',
        )
    );
   

        // Register settings for "Two-factor authentication" section.
        add_settings_section(
            'slc_two_factor_auth_section',
            __( 'Authentification à deux facteurs', 'slc' ),
            'slc_two_factor_auth_section_description',
            'slc_security_plus_options_page'
        );

        register_setting(
            'slc_security_plus_options_group',
            'slc_2fa_enabled',
            array(
                'type' => 'boolean',
                'description' => __( 'Activer l\'authentification à deux facteurs.', 'slc' ),
                'sanitize_callback' => 'boolval',
                'show_in_rest' => true,
                'default' => false,
            )
        );

        add_settings_field(
            'slc_2fa_enabled',
            __( 'Activer l\'authentification à deux facteurs', 'slc' ),
            'slc_2fa_enabled_field_callback',
            'slc_security_plus_options_page',
            'slc_two_factor_auth_section',
            array(
                'label_for' => 'slc_2fa_enabled',
            )
        );
    }

    add_action( 'admin_init', 'slc_register_security_plus_settings' );

 

    /*
     * Callback for the Password Complexity field
     */
    function slc_password_complexity_field_callback( $args ) {
        $options = get_option( 'slc_security_plus_options' );
        ?>
        <select name="slc_security_plus_options[<?php echo esc_attr( $args['label_for'] ); ?>]" id="<?php echo esc_attr( $args['label_for'] ); ?>">
            <option value="0" <?php selected( isset( $options[ $args['label_for'] ] ) && $options[ $args['label_for'] ] === '0' ); ?>><?php esc_html_e( 'Aucun', 'slc' ); ?></option>
            <option value="1" <?php selected( isset( $options[ $args['label_for'] ] ) && $options[ $args['label_for'] ] === '1' ); ?>><?php esc_html_e( 'Faible', 'slc' ); ?></option>
            <option value="2" <?php selected( isset( $options[ $args['label_for'] ] ) && $options[ $args['label_for'] ] === '2' ); ?>><?php esc_html_e( 'Moyen', 'slc' ); ?></option>
            <option value="3" <?php selected( isset( $options[ $args['label_for'] ] ) && $options[ $args['label_for'] ] === '3' ); ?>><?php esc_html_e( 'Fort', 'slc' ); ?></option>
        </select>
        <?php
    }


 
/*
 * Fonction de rappel pour l'affichage du champ "Lettres majuscules requises"
 */
function slc_password_uppercase_field_callback( $args ) {
    $option_name = 'slc_security_options';
    $options = get_option( $option_name );
    $checked = isset( $options['slc_password_uppercase'] ) ? $options['slc_password_uppercase'] : '';

    $html = '<input type="checkbox" id="slc_password_uppercase" name="' . $option_name . '[slc_password_uppercase]" value="1"' . checked( 1, $checked, false ) . '/>';
    $html .= '<label for="slc_password_uppercase">&nbsp;'  . $args['label_for'] . '</label>';

    echo $html;
}

/*
 * Fonction de rappel pour l'affichage du champ "Lettres minuscules requises"
 */
function slc_password_lowercase_field_callback( $args ) {
    $option_name = 'slc_security_options';
    $options = get_option( $option_name );
    $checked = isset( $options['slc_password_lowercase'] ) ? $options['slc_password_lowercase'] : '';

    $html = '<input type="checkbox" id="slc_password_lowercase" name="' . $option_name . '[slc_password_lowercase]" value="1"' . checked( 1, $checked, false ) . '/>';
    $html .= '<label for="slc_password_lowercase">&nbsp;' . $args['label_for'] . '</label>';

    echo $html;
}

/*
 * Fonction de rappel pour l'affichage du champ "Chiffres requis"
 */
function slc_password_numbers_field_callback( $args ) {
    $option_name = 'slc_security_options';
    $options = get_option( $option_name );
    $checked = isset( $options['slc_password_numbers'] ) ? $options['slc_password_numbers'] : '';

    $html = '<input type="checkbox" id="slc_password_numbers" name="' . $option_name . '[slc_password_numbers]" value="1"' . checked( 1, $checked, false ) . '/>';
    $html .= '<label for="slc_password_numbers">&nbsp;' . $args['label_for'] . '</label>';

    echo $html;
}

/*
 * Fonction de rappel pour l'affichage du champ "Symboles requis"
 */
function slc_password_symbols_field_callback( $args ) {
    $option_name = 'slc_security_options';
    $options = get_option( $option_name );
    $checked = isset( $options['slc_password_symbols'] ) ? $options['slc_password_symbols'] : '';

    $html = '<input type="checkbox" id="slc_password_symbols" name="' . $option_name . '[slc_password_symbols]" value="1"' . checked( 1, $checked, false ) . '/>';
    $html .= '<label for="slc_password_symbols">&nbsp;' . $args['label_for'] . '</label>';

    echo $html;
}

/**
 * Fonction pour ajouter la section "Mots de passe forts" à la page des options de sécurité plus
 */
function slc_add_strong_passwords_section() {
    add_settings_section(
        'slc_strong_passwords_section',
        __( 'Mots de passe forts', 'slc' ),
        'slc_strong_passwords_section_description',
        'slc_security_plus_options_page'
    );
    add_settings_field(
        'slc_password_length',
        __( 'Longueur minimale du mot de passe', 'slc' ),
        'slc_password_length_field_callback',
        'slc_security_plus_options_page',
        'slc_strong_passwords_section',
        array(
            'label_for' => 'slc_password_length',
        )
    );
    add_settings_field(
        'slc_password_uppercase',
        __( 'Nécessite une lettre majuscule', 'slc' ),
        'slc_password_uppercase_field_callback',
        'slc_security_plus_options_page',
        'slc_strong_passwords_section',
        array(
            'label_for' => 'slc_password_uppercase',
        )
    );
    add_settings_field(
        'slc_password_lowercase',
        __( 'Nécessite une lettre minuscule', 'slc' ),
        'slc_password_lowercase_field_callback',
        'slc_security_plus_options_page',
        'slc_strong_passwords_section',
        array(
            'label_for' => 'slc_password_lowercase',
        )
    );
    add_settings_field(
        'slc_password_number',
        __( 'Nécessite un chiffre', 'slc' ),
        'slc_password_number_field_callback',
        'slc_security_plus_options_page',
        'slc_strong_passwords_section',
        array(
            'label_for' => 'slc_password_number',
        )
    );
    add_settings_field(
        'slc_password_special',
        __( 'Nécessite un caractère spécial', 'slc' ),
        'slc_password_special_field_callback',
        'slc_security_plus_options_page',
        'slc_strong_passwords_section',
        array(
            'label_for' => 'slc_password_special',
        )
    );
}
add_action( 'admin_init', 'slc_add_strong_passwords_section' );

/**
 * Fonction pour afficher la description de la section "Mots de passe forts"
 */
function slc_strong_passwords_section_description() {
    echo '<p>' . __( 'Configurez les paramètres pour les mots de passe forts.', 'slc' ) . '</p>';
}

/**
 * Fonction de rappel pour afficher le champ de saisie de la longueur minimale du mot de passe
 */
function slc_password_length_field_callback( $args ) {
    $options = get_option( 'slc_security_options' );
    $length = isset( $options['password_length'] ) ? $options['password_length'] : '';
    ?>
    <input type="number" min="0" step="1" id="<?php echo esc_attr( $args['label_for'] ); ?>"
           name="slc_security_options[password_length]" value="<?php echo esc_attr( $length ); ?>">
    <p class="description">
        <?php esc_html_e( 'Entrez la longueur minimale souhaitée pour les mots de passe.', 'slc' ); ?>
    </p>
    <?php
}

/**
 * Fonction de rappel pour afficher le champ
*/



add_action( 'admin_init', 'slc_add_strong_passwords_section' );
